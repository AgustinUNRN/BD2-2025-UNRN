<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Mini Twitter - TP Individual&#10;&#10;## Autor&#10;**Agustín Fernández Gómez**&#10;&#10;---&#10;&#10;## Consigna&#10;&#10;**Universidad Nacional de Río Negro**  &#10;Taller de Tecnologías y Producción de Software  &#10;Lic. En Sistemas&#10;&#10;### Trabajo Práctico General&#10;&#10;Vamos a construir una versión muy simplificada de Twitter con una arquitectura monolítica de back-end. El back-end y el front-end son aplicaciones separadas que se comunican vía servicios web.&#10;&#10;### Requerimientos a modelar&#10;&#10;1. Cada usuario conoce todos los Tweets que hizo.&#10;2. Un tweet puede ser re-tweet de otro, y este tweet debe conocer a su tweet de origen.&#10;3. Un re-tweet no tiene texto adicional.&#10;4. Los tweets de un usuario se deben eliminar cuando el usuario es eliminado. No existen tweets no referenciados por un usuario.&#10;5. No se pueden agregar dos usuarios con el mismo userName.&#10;6. userName no puede ser menor a 5 caracteres ni mayor a 25.&#10;7. Los tweets deben tener un texto de 1 carácter como mínimo y 280 caracteres como máximo.&#10;8. No se debe permitir crear un re-tweet de un tweet creado por el mismo usuario que re-twittea.&#10;&#10;### Se pide&#10;&#10;1. Modelar en objetos.&#10;2. Escribir test unitarios.&#10;3. Mapear para persistir y generar los servicios de backend.&#10;4. Escribir test de integración usando una BD en memoria.&#10;5. Exponer los servicios de backend como Servicios Web.&#10;6. Escribir test de integración de la capa Web.&#10;7. Lograr cobertura alta (&gt;= 90%).&#10;8. Implementar el front-end cuya navegabilidad se describe más adelante.&#10;&#10;---&#10;&#10;## Front-end&#10;&#10;La home page debe tener la siguiente estructura:&#10;&#10;- **Header Menú**:&#10;  - Nombre del sistema&#10;  - Link a la home page&#10;  - Link para crear un nuevo tweet&#10;&#10;- **Panel principal**:&#10;  - Se muestran los tweets (no incluir ReTweets) de cualquier usuario, paginados de a 10 por página.&#10;  - Navegación de paginación (adelante/atrás, botones deshabilitados si no hay más).&#10;&#10;- **Panel izquierdo**:&#10;  - Lista de usuarios del sistema (solo userNames).&#10;  - Al clickear en un usuario, se muestran sus últimos 15 tweets en el panel principal.&#10;  - Si es re-tweet, mostrar la fecha de retweet, el nombre del usuario que retwitteó y los datos originales del tweet.&#10;  - Botón &quot;Mostrar más&quot; para ver los siguientes 15 tweets, hasta que no haya más (cambia a &quot;No hay más...&quot; si se termina).&#10;&#10;- **Crear nuevo tweet**:&#10;  - Formulario con:&#10;    - Input para el userid del creador&#10;    - Input para el texto del tweet&#10;    - Botón para crear&#10;  - Indicar éxito o falla en la creación.&#10;&#10;---&#10;&#10;## Tecnologías usadas&#10;&#10;- &lt;img src=&quot;https://img.shields.io/badge/Java-17%2B-blue?logo=java&quot; alt=&quot;Java&quot; height=&quot;20&quot;/&gt; Java 17+&#10;- &lt;img src=&quot;https://img.shields.io/badge/JUnit-5-green?logo=junit5&quot; alt=&quot;JUnit 5&quot; height=&quot;20&quot;/&gt; JUnit 5 para tests unitarios e integración&#10;- &lt;img src=&quot;https://img.shields.io/badge/Maven-Build%20Tool-blue?logo=apachemaven&quot; alt=&quot;Maven&quot; height=&quot;20&quot;/&gt; Maven para gestión de dependencias y build&#10;- &lt;img src=&quot;https://img.shields.io/badge/H2-Database-lightgrey?logo=h2&quot; alt=&quot;H2 Database&quot; height=&quot;20&quot;/&gt; H2 Database (o similar) para tests de integración con base de datos en memoria&#10;- &lt;img src=&quot;https://img.shields.io/badge/Hibernate-Persistencia-59666C?logo=hibernate&quot; alt=&quot;Hibernate&quot; height=&quot;20&quot;/&gt; Hibernate para persistencia de datos&#10;- &lt;img src=&quot;https://img.shields.io/badge/Spring%20Boot-Web%20Backend-6DB33F?logo=springboot&quot; alt=&quot;Spring Boot&quot; height=&quot;20&quot;/&gt; Spring Boot para servicios web REST&#10;- &lt;img src=&quot;https://img.shields.io/badge/REST-API-orange?logo=rest&quot; alt=&quot;REST API&quot; height=&quot;20&quot;/&gt; REST API para comunicación entre front-end y back-end&#10;- &lt;img src=&quot;https://img.shields.io/badge/React-Front--end-61DAFB?logo=react&quot; alt=&quot;React&quot; height=&quot;20&quot;/&gt; React para el front-end&#10;- &lt;img src=&quot;https://img.shields.io/badge/HTML%2FCSS%2FJS-Frontend-yellow?logo=html5&quot; alt=&quot;HTML/CSS/JavaScript&quot; height=&quot;20&quot;/&gt; HTML/CSS/JavaScript para el front-end&#10;&#10;---&#10;&#10;## Modelo de Objetos&#10;&#10;&gt; El siguiente diagrama representa el modelado de objetos principal del sistema (User, Tweet, ReTweet). Puedes abrir el archivo HTML en tu navegador para visualizarlo o editarlo en diagrams.net/draw.io.&#10;&#10;[Ver modelo de objetos (HTML)](modeloDeObjetos.html)&#10;&#10;---&#10;&#10;&gt; Trabajo Práctico General - Mini Twitter  &#10;&gt; Universidad Nacional de Río Negro - Lic. en Sistemas  &#10;&gt; Autor: Agustín Fernández Gómez&#10;" />
              <option name="updatedContent" value="# Mini Twitter - TP Individual&#10;&#10;## Autor&#10;**Agustín Fernández Gómez**&#10;&#10;---&#10;&#10;## Consigna&#10;&#10;**Universidad Nacional de Río Negro**  &#10;Taller de Tecnologías y Producción de Software  &#10;Lic. En Sistemas&#10;&#10;### Trabajo Práctico General&#10;&#10;Vamos a construir una versión muy simplificada de Twitter con una arquitectura monolítica de back-end. El back-end y el front-end son aplicaciones separadas que se comunican vía servicios web.&#10;&#10;### Requerimientos a modelar&#10;&#10;1. Cada usuario conoce todos los Tweets que hizo.&#10;2. Un tweet puede ser re-tweet de otro, y este tweet debe conocer a su tweet de origen.&#10;3. Un re-tweet no tiene texto adicional.&#10;4. Los tweets de un usuario se deben eliminar cuando el usuario es eliminado. No existen tweets no referenciados por un usuario.&#10;5. No se pueden agregar dos usuarios con el mismo userName.&#10;6. userName no puede ser menor a 5 caracteres ni mayor a 25.&#10;7. Los tweets deben tener un texto de 1 carácter como mínimo y 280 caracteres como máximo.&#10;8. No se debe permitir crear un re-tweet de un tweet creado por el mismo usuario que re-twittea.&#10;&#10;### Se pide&#10;&#10;1. Modelar en objetos.&#10;2. Escribir test unitarios.&#10;3. Mapear para persistir y generar los servicios de backend.&#10;4. Escribir test de integración usando una BD en memoria.&#10;5. Exponer los servicios de backend como Servicios Web.&#10;6. Escribir test de integración de la capa Web.&#10;7. Lograr cobertura alta (&gt;= 90%).&#10;8. Implementar el front-end cuya navegabilidad se describe más adelante.&#10;&#10;---&#10;&#10;## Front-end&#10;&#10;La home page debe tener la siguiente estructura:&#10;&#10;- **Header Menú**:&#10;  - Nombre del sistema&#10;  - Link a la home page&#10;  - Link para crear un nuevo tweet&#10;&#10;- **Panel principal**:&#10;  - Se muestran los tweets (no incluir ReTweets) de cualquier usuario, paginados de a 10 por página.&#10;  - Navegación de paginación (adelante/atrás, botones deshabilitados si no hay más).&#10;&#10;- **Panel izquierdo**:&#10;  - Lista de usuarios del sistema (solo userNames).&#10;  - Al clickear en un usuario, se muestran sus últimos 15 tweets en el panel principal.&#10;  - Si es re-tweet, mostrar la fecha de retweet, el nombre del usuario que retwitteó y los datos originales del tweet.&#10;  - Botón &quot;Mostrar más&quot; para ver los siguientes 15 tweets, hasta que no haya más (cambia a &quot;No hay más...&quot; si se termina).&#10;&#10;- **Crear nuevo tweet**:&#10;  - Formulario con:&#10;    - Input para el userid del creador&#10;    - Input para el texto del tweet&#10;    - Botón para crear&#10;  - Indicar éxito o falla en la creación.&#10;&#10;---&#10;&#10;## Tecnologías usadas&#10;&#10;- &lt;img src=&quot;https://img.shields.io/badge/Java-17%2B-blue?logo=java&quot; alt=&quot;Java&quot; height=&quot;20&quot;/&gt; Java 17+&#10;- &lt;img src=&quot;https://img.shields.io/badge/JUnit-5-green?logo=junit5&quot; alt=&quot;JUnit 5&quot; height=&quot;20&quot;/&gt; JUnit 5 para tests unitarios e integración&#10;- &lt;img src=&quot;https://img.shields.io/badge/Maven-Build%20Tool-blue?logo=apachemaven&quot; alt=&quot;Maven&quot; height=&quot;20&quot;/&gt; Maven para gestión de dependencias y build&#10;- &lt;img src=&quot;https://img.shields.io/badge/H2-Database-lightgrey?logo=h2&quot; alt=&quot;H2 Database&quot; height=&quot;20&quot;/&gt; H2 Database (o similar) para tests de integración con base de datos en memoria&#10;- &lt;img src=&quot;https://img.shields.io/badge/Hibernate-Persistencia-59666C?logo=hibernate&quot; alt=&quot;Hibernate&quot; height=&quot;20&quot;/&gt; Hibernate para persistencia de datos&#10;- &lt;img src=&quot;https://img.shields.io/badge/Spring%20Boot-Web%20Backend-6DB33F?logo=springboot&quot; alt=&quot;Spring Boot&quot; height=&quot;20&quot;/&gt; Spring Boot para servicios web REST&#10;- &lt;img src=&quot;https://img.shields.io/badge/REST-API-orange?logo=rest&quot; alt=&quot;REST API&quot; height=&quot;20&quot;/&gt; REST API para comunicación entre front-end y back-end&#10;- &lt;img src=&quot;https://img.shields.io/badge/React-Front--end-61DAFB?logo=react&quot; alt=&quot;React&quot; height=&quot;20&quot;/&gt; React para el front-end&#10;- &lt;img src=&quot;https://img.shields.io/badge/HTML%2FCSS%2FJS-Frontend-yellow?logo=html5&quot; alt=&quot;HTML/CSS/JavaScript&quot; height=&quot;20&quot;/&gt; HTML/CSS/JavaScript para el front-end&#10;&#10;---&#10;&#10;## Modelo de Objetos&#10;&#10;&gt; El siguiente diagrama representa el modelado de objetos principal del sistema (User, Tweet, ReTweet). Puedes visualizarlo directamente aquí:&#10;&#10;![Modelo de Objetos](Diagrama_MiniTweeter_BD2_2025.drawio.png)&#10;&#10;---&#10;&#10;&gt; Trabajo Práctico General - Mini Twitter  &#10;&gt; Universidad Nacional de Río Negro - Lic. en Sistemas  &#10;&gt; Autor: Agustín Fernández Gómez" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/unrn/model/ReTweet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/unrn/model/ReTweet.java" />
              <option name="originalContent" value="package unrn.model;&#10;/*retweets:&#10;--Un tweet puede ser re-tweet de otro, y este tweet debe conocer a su tweet de origen.&#10;--Un re-tweet no tiene texto adicional.&#10;--no se puede crear si el que retweetea es el mismo que lo creo&#10;--Si es re-tweet se debe mostrar la fecha de cuando se retuiteó, el nombre del usuario que re-twitteo. Además de los datos originales del tweet&#10;*/&#10;import java.util.Date;&#10;&#10;public class ReTweet {&#10;    //--Si es re-tweet se debe mostrar la fecha de cuando se retuiteó,&#10;    // el nombre del usuario que re-twitteo.&#10;    // Además de los datos originales del tweet&#10;    private Date dateRetweeted;&#10;    private User userRetweeted;&#10;    private Tweet originalTweet;&#10;&#10;    static final String ERROR_USER_RETWEET_SELF = &quot;El usuario no puede retuitear su propio tweet&quot;;&#10;    static final String ERROR_USER_RETWEET_NULL = &quot;El usuario que retuitea no puede ser nulo&quot;;&#10;    static final String ERROR_ORIGINAL_TWEET_NULL = &quot;El tweet original no puede ser&quot;;&#10;&#10;    //--no se puede crear si el que retweetea es el mismo que lo creo&#10;    public ReTweet(User user, Tweet originalTweet) {&#10;        if (originalTweet == null) {&#10;            throw new RuntimeException(ERROR_ORIGINAL_TWEET_NULL);&#10;        }&#10;        if(user == null) {&#10;            throw new RuntimeException(ERROR_USER_RETWEET_NULL);&#10;        }&#10;        if (originalTweet.isUserCreator(user)) {&#10;            throw new RuntimeException(ERROR_USER_RETWEET_SELF);&#10;        }&#10;        this.originalTweet = originalTweet;&#10;        this.userRetweeted = user;&#10;        this.dateRetweeted = new Date();&#10;    }&#10;&#10;    public Tweet getOriginalTweet() {&#10;        return originalTweet;&#10;    }&#10;&#10;    public User getUserRetweeted() {&#10;        return userRetweeted;&#10;    }&#10;&#10;    public Date getDate() {&#10;        return dateRetweeted;&#10;    }&#10;}" />
              <option name="updatedContent" value="package unrn.model;&#10;/*retweets:&#10;--Un tweet puede ser re-tweet de otro, y este tweet debe conocer a su tweet de origen.&#10;--Un re-tweet no tiene texto adicional.&#10;--no se puede crear si el que retweetea es el mismo que lo creo&#10;--Si es re-tweet se debe mostrar la fecha de cuando se retuiteó, el nombre del usuario que re-twitteo. Además de los datos originales del tweet&#10;*/&#10;import java.util.Date;&#10;&#10;public class ReTweet {&#10;    //--Si es re-tweet se debe mostrar la fecha de cuando se retuiteó,&#10;    // el nombre del usuario que re-twitteo.&#10;    // Además de los datos originales del tweet&#10;    private Date dateRetweeted;&#10;    private User userRetweeted;&#10;    private Tweet originalTweet;&#10;&#10;    static final String ERROR_USER_RETWEET_SELF = &quot;El usuario no puede retuitear su propio tweet&quot;;&#10;    static final String ERROR_USER_RETWEET_NULL = &quot;El usuario que retuitea no puede ser nulo&quot;;&#10;    static final String ERROR_ORIGINAL_TWEET_NULL = &quot;El tweet original no puede ser&quot;;&#10;&#10;    //--no se puede crear si el que retweetea es el mismo que lo creo&#10;    public ReTweet(User user, Tweet originalTweet) {&#10;        if (originalTweet == null) {&#10;            throw new RuntimeException(ERROR_ORIGINAL_TWEET_NULL);&#10;        }&#10;        if(user == null) {&#10;            throw new RuntimeException(ERROR_USER_RETWEET_NULL);&#10;        }&#10;        if (originalTweet.isUserCreator(user)) {&#10;            throw new RuntimeException(ERROR_USER_RETWEET_SELF);&#10;        }&#10;        this.originalTweet = originalTweet;&#10;        this.userRetweeted = user;&#10;        this.dateRetweeted = new Date();&#10;    }&#10;&#10;    public Tweet getOriginalTweet() {&#10;        return originalTweet;&#10;    }&#10;&#10;    public User getUserRetweeted() {&#10;        return userRetweeted;&#10;    }&#10;&#10;    public Date getDate() {&#10;        return dateRetweeted;&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object obj) {&#10;        if (this == obj) return true;&#10;        if (!(obj instanceof ReTweet)) return false;&#10;        ReTweet other = (ReTweet) obj;&#10;        return originalTweet.equals(other.originalTweet) &amp;&amp; userRetweeted.equals(other.userRetweeted);&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return originalTweet.hashCode() * 31 + userRetweeted.hashCode();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/unrn/model/Tweet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/unrn/model/Tweet.java" />
              <option name="originalContent" value="package unrn.model;&#10;/*tweets:&#10;--No existen tweets no referenciados por un usuario.&#10;--minimo 1 caracter y maximo 280&#10;--Cada tweet debe mostrar el nombre del usuario, el texto del tweet y la fecha de creación.&#10;--Al clickear en crear nuevo tweet, aparecerá en el panel principal un formulario con los siguientes inputs:&#10;Para cargar el userid del creador del tweet (dado que no hay que implementar autenticación)&#10;Para cargar el texto del tweet&#10;Botón para crear el tweet.*/&#10;import java.util.Date;&#10;import java.util.UUID;&#10;&#10;public class Tweet {&#10;    //--Cada tweet debe mostrar el nombre del usuario, el texto del tweet y la fecha de creación.&#10;    private String id;&#10;    private String text;&#10;    private User userCreator; //--No existen tweets no referenciados por un usuario.&#10;    private Date dateCreated;&#10;//    private List&lt;User&gt; favorite; // hace falta?&#10;//    private List&lt;User&gt; retweet; // hace falta?&#10;&#10;    static final String ERROR_TWEET_TEXT_LENGTH = &quot;El texto del tweet debe tener entre 1 y 280 caracteres&quot;;&#10;    static final String ERROR_USER_CREATOR_NULL = &quot;El creador del tweet no puede ser nulo&quot;;&#10;    static final String ERROR_USER_RETWEET_SELF = &quot;El usuario no puede retuitear su propio tweet&quot;;&#10;    static final String ERROR_USER_RETWEETED_NULL = &quot;El usuario que retuitea no puede ser nulo&quot;;&#10;&#10;    public Tweet(String id, String text, User userCreator, Date dateCreated) {&#10;        if (id == null || id.isEmpty()) {&#10;            throw new RuntimeException(&quot;El id no puede ser nulo o vacío&quot;);&#10;        }&#10;        if (text == null || text.length() &lt; 1 || text.length() &gt; 280) {&#10;            throw new RuntimeException(ERROR_TWEET_TEXT_LENGTH);&#10;        }&#10;        if (userCreator == null) {&#10;            throw new RuntimeException(ERROR_USER_CREATOR_NULL);&#10;        }&#10;        this.id = id;&#10;        this.text = text;&#10;        this.userCreator = userCreator;&#10;        this.dateCreated = dateCreated != null ? dateCreated : new Date();&#10;    }&#10;&#10;    public Tweet(String text, User userCreator) {&#10;        if (text == null || text.length() &lt; 1 || text.length() &gt; 280) {&#10;            throw new RuntimeException(ERROR_TWEET_TEXT_LENGTH);&#10;        }&#10;        if (userCreator == null) {&#10;            throw new RuntimeException(ERROR_USER_CREATOR_NULL);&#10;        }&#10;        this.id = UUID.randomUUID().toString();&#10;        this.text = text;&#10;        this.userCreator = userCreator;&#10;        this.dateCreated = new Date();&#10;    }&#10;&#10;    public String getId() {&#10;        return id;&#10;    }&#10;    public String getText() {&#10;        return text;&#10;    }&#10;&#10;    public boolean isUserCreator(User user) {&#10;        return userCreator.equals(user);&#10;    }&#10;&#10;    public String getUserCreatorUsername() {&#10;        return userCreator.getUsername();&#10;    }&#10;&#10;    public Date getDateCreated() {&#10;        return dateCreated;&#10;    }&#10;&#10;    public ReTweet retweetBy(User userRetweeted) {&#10;        if (userRetweeted == null) {&#10;            throw new RuntimeException(ERROR_USER_RETWEETED_NULL);&#10;        }&#10;        if (this.isUserCreator(userRetweeted)) {&#10;            throw new RuntimeException(ERROR_USER_RETWEET_SELF);&#10;        }&#10;        return new ReTweet(userRetweeted, this);&#10;    }&#10;    &#10;&#10;}&#10;" />
              <option name="updatedContent" value="package unrn.model;&#10;/*tweets:&#10;--No existen tweets no referenciados por un usuario.&#10;--minimo 1 caracter y maximo 280&#10;--Cada tweet debe mostrar el nombre del usuario, el texto del tweet y la fecha de creación.&#10;--Al clickear en crear nuevo tweet, aparecerá en el panel principal un formulario con los siguientes inputs:&#10;Para cargar el userid del creador del tweet (dado que no hay que implementar autenticación)&#10;Para cargar el texto del tweet&#10;Botón para crear el tweet.*/&#10;import java.util.Date;&#10;import java.util.UUID;&#10;&#10;public class Tweet {&#10;    //--Cada tweet debe mostrar el nombre del usuario, el texto del tweet y la fecha de creación.&#10;    private String id;&#10;    private String text;&#10;    private User userCreator; //--No existen tweets no referenciados por un usuario.&#10;    private Date dateCreated;&#10;//    private List&lt;User&gt; favorite; // hace falta?&#10;//    private List&lt;User&gt; retweet; // hace falta?&#10;&#10;    static final String ERROR_TWEET_TEXT_LENGTH = &quot;El texto del tweet debe tener entre 1 y 280 caracteres&quot;;&#10;    static final String ERROR_USER_CREATOR_NULL = &quot;El creador del tweet no puede ser nulo&quot;;&#10;    static final String ERROR_USER_RETWEET_SELF = &quot;El usuario no puede retuitear su propio tweet&quot;;&#10;    static final String ERROR_USER_RETWEETED_NULL = &quot;El usuario que retuitea no puede ser nulo&quot;;&#10;&#10;    public Tweet(String id, String text, User userCreator, Date dateCreated) {&#10;        if (id == null || id.isEmpty()) {&#10;            throw new RuntimeException(&quot;El id no puede ser nulo o vacío&quot;);&#10;        }&#10;        if (text == null || text.length() &lt; 1 || text.length() &gt; 280) {&#10;            throw new RuntimeException(ERROR_TWEET_TEXT_LENGTH);&#10;        }&#10;        if (userCreator == null) {&#10;            throw new RuntimeException(ERROR_USER_CREATOR_NULL);&#10;        }&#10;        this.id = id;&#10;        this.text = text;&#10;        this.userCreator = userCreator;&#10;        this.dateCreated = dateCreated != null ? dateCreated : new Date();&#10;    }&#10;&#10;    public Tweet(String text, User userCreator) {&#10;        if (text == null || text.length() &lt; 1 || text.length() &gt; 280) {&#10;            throw new RuntimeException(ERROR_TWEET_TEXT_LENGTH);&#10;        }&#10;        if (userCreator == null) {&#10;            throw new RuntimeException(ERROR_USER_CREATOR_NULL);&#10;        }&#10;        this.id = UUID.randomUUID().toString();&#10;        this.text = text;&#10;        this.userCreator = userCreator;&#10;        this.dateCreated = new Date();&#10;    }&#10;&#10;    public String getId() {&#10;        return id;&#10;    }&#10;    public String getText() {&#10;        return text;&#10;    }&#10;&#10;    public boolean isUserCreator(User user) {&#10;        return userCreator.equals(user);&#10;    }&#10;&#10;    public String getUserCreatorUsername() {&#10;        return userCreator.getUsername();&#10;    }&#10;&#10;    public Date getDateCreated() {&#10;        return dateCreated;&#10;    }&#10;&#10;    public ReTweet retweetBy(User userRetweeted) {&#10;        if (userRetweeted == null) {&#10;            throw new RuntimeException(ERROR_USER_RETWEETED_NULL);&#10;        }&#10;        if (this.isUserCreator(userRetweeted)) {&#10;            throw new RuntimeException(ERROR_USER_RETWEET_SELF);&#10;        }&#10;        return new ReTweet(userRetweeted, this);&#10;    }&#10;    &#10;    @Override&#10;    public boolean equals(Object obj) {&#10;        if (this == obj) return true;&#10;        if (!(obj instanceof Tweet)) return false;&#10;        Tweet other = (Tweet) obj;&#10;        return id.equals(other.id);&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return id.hashCode();&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/unrn/model/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/unrn/model/User.java" />
              <option name="originalContent" value="package unrn.model;&#10;/*usuario:&#10;--Cada usuario conoce todos los Tweets que hizo. Listo&#10;--Los tweets de un usuario se deben eliminar cuando el usuario es eliminado. Listo&#10;--No existen tweets no referenciados por un usuario. Listo&#10;--No se pueden agregar dos usuarios con el mismo userName. Lo valido en otro lugar&#10;--userName no puede ser menor a 5 caracteres ni mayor a 25. Listo&#10;--un usuario no puede retuitear su propio tweet LISTO&#10;--listar los tweets que hizo LISTO&#10;--Listar los re-tweets que hizo LISTO&#10;--mostrar su username LISTO&#10;*/&#10;&#10;import java.util.List;&#10;import java.util.ArrayList;&#10;import java.util.Objects;&#10;&#10;public class User {&#10;    private String username;&#10;    private String email;&#10;    private List&lt;Tweet&gt; tweets;&#10;    private List&lt;ReTweet&gt; retweets;&#10;&#10;    static final String ERROR_USERNAME_EMPTY = &quot;El nombre no puede estar vacío&quot;;&#10;    static final String ERROR_USERNAME_SHORT = &quot;El nombre debe tener más de 5 caracteres&quot;;&#10;    static final String ERROR_USERNAME_LONG = &quot;El nombre no puede tener más de 25 caracteres&quot;;&#10;    static final String ERROR_EMAIL_EMPTY = &quot;El correo electrónico no puede estar vacío&quot;;&#10;&#10;    public User (String username, String email) {&#10;        if (username == null || username.isEmpty()) {&#10;            throw new RuntimeException(ERROR_USERNAME_EMPTY);&#10;        }&#10;        if (username.length() &lt; 5) {&#10;            throw new RuntimeException(ERROR_USERNAME_SHORT);&#10;        }&#10;        if (username.length() &gt; 25) {&#10;            throw new RuntimeException(ERROR_USERNAME_LONG);&#10;        }&#10;        if (email == null || email.isEmpty()) {&#10;            throw new RuntimeException(ERROR_EMAIL_EMPTY);&#10;        }&#10;        this.username = username;&#10;        this.email = email;&#10;        this.tweets = new ArrayList&lt;&gt;();&#10;        this.retweets = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    //--mostrar su username&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    //--listar los tweets que hizo&#10;    public List&lt;Tweet&gt; getTweets() {&#10;        return tweets;&#10;    }&#10;&#10;    //--Listar los re-tweets que hizo&#10;    public List&lt;ReTweet&gt; getRetweets() {&#10;        return retweets;&#10;    }&#10;&#10;    public void createTweet(String text) {&#10;        // Evitar tweet duplicado: mismo texto y mismo usuario&#10;        boolean existe = tweets.stream().anyMatch(t -&gt; t.getText().equals(text) &amp;&amp; t.isUserCreator(this));&#10;        if (!existe) {&#10;            Tweet tweet = new Tweet(text, this);&#10;            tweets.add(tweet);&#10;        }&#10;    }&#10;&#10;    //--un usuario no puede retuitear su propio tweet&#10;    public void createRetweet(Tweet tweet) {&#10;        // Evitar retweet duplicado: mismo tweet original y mismo usuario&#10;        boolean existe = retweets.stream().anyMatch(r -&gt; r.getOriginalTweet().equals(tweet) &amp;&amp; r.getUserRetweeted().equals(this));&#10;        if (!existe) {&#10;            ReTweet retweet = tweet.retweetBy(this);&#10;            retweets.add(retweet);&#10;        }&#10;    }&#10;&#10;    public void delete(){&#10;        deleteAllTweet();&#10;        deleteAllRetweets();&#10;    }&#10;&#10;    public void deleteAllTweet() {&#10;        tweets.clear();&#10;    }&#10;&#10;    public void deleteAllRetweets() {&#10;        retweets.clear();&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object obj) {&#10;        if (this == obj) return true;&#10;        if (!(obj instanceof User)) return false;&#10;        User user = (User) obj;&#10;        return username.equals(user.username) &amp;&amp; email.equals(user.email);&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Objects.hash(username, email);&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package unrn.model;&#10;/*usuario:&#10;--Cada usuario conoce todos los Tweets que hizo. Listo&#10;--Los tweets de un usuario se deben eliminar cuando el usuario es eliminado. Listo&#10;--No existen tweets no referenciados por un usuario. Listo&#10;--No se pueden agregar dos usuarios con el mismo userName. Lo valido en otro lugar&#10;--userName no puede ser menor a 5 caracteres ni mayor a 25. Listo&#10;--un usuario no puede retuitear su propio tweet LISTO&#10;--listar los tweets que hizo LISTO&#10;--Listar los re-tweets que hizo LISTO&#10;--mostrar su username LISTO&#10;*/&#10;&#10;import java.util.List;&#10;import java.util.ArrayList;&#10;import java.util.Objects;&#10;&#10;public class User {&#10;    private String username;&#10;    private String email;&#10;    private List&lt;Tweet&gt; tweets;&#10;    private List&lt;ReTweet&gt; retweets;&#10;&#10;    static final String ERROR_USERNAME_EMPTY = &quot;El nombre no puede estar vacío&quot;;&#10;    static final String ERROR_USERNAME_SHORT = &quot;El nombre debe tener más de 5 caracteres&quot;;&#10;    static final String ERROR_USERNAME_LONG = &quot;El nombre no puede tener más de 25 caracteres&quot;;&#10;    static final String ERROR_EMAIL_EMPTY = &quot;El correo electrónico no puede estar vacío&quot;;&#10;&#10;    public User (String username, String email) {&#10;        if (username == null || username.isEmpty()) {&#10;            throw new RuntimeException(ERROR_USERNAME_EMPTY);&#10;        }&#10;        if (username.length() &lt; 5) {&#10;            throw new RuntimeException(ERROR_USERNAME_SHORT);&#10;        }&#10;        if (username.length() &gt; 25) {&#10;            throw new RuntimeException(ERROR_USERNAME_LONG);&#10;        }&#10;        if (email == null || email.isEmpty()) {&#10;            throw new RuntimeException(ERROR_EMAIL_EMPTY);&#10;        }&#10;        this.username = username;&#10;        this.email = email;&#10;        this.tweets = new ArrayList&lt;&gt;();&#10;        this.retweets = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    //--mostrar su username&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    //--listar los tweets que hizo&#10;    public List&lt;Tweet&gt; getTweets() {&#10;        return tweets;&#10;    }&#10;&#10;    //--Listar los re-tweets que hizo&#10;    public List&lt;ReTweet&gt; getRetweets() {&#10;        return retweets;&#10;    }&#10;&#10;    public void createTweet(String text) {&#10;        Tweet tweet = new Tweet(text, this);&#10;        if (!tweets.contains(tweet)) {&#10;            tweets.add(tweet);&#10;        }&#10;    }&#10;&#10;    //--un usuario no puede retuitear su propio tweet&#10;    public void createRetweet(Tweet tweet) {&#10;        ReTweet retweet = tweet.retweetBy(this);&#10;        if (!retweets.contains(retweet)) {&#10;            retweets.add(retweet);&#10;        }&#10;    }&#10;&#10;    public void delete(){&#10;        deleteAllTweet();&#10;        deleteAllRetweets();&#10;    }&#10;&#10;    public void deleteAllTweet() {&#10;        tweets.clear();&#10;    }&#10;&#10;    public void deleteAllRetweets() {&#10;        retweets.clear();&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object obj) {&#10;        if (this == obj) return true;&#10;        if (!(obj instanceof User)) return false;&#10;        User user = (User) obj;&#10;        return username.equals(user.username) &amp;&amp; email.equals(user.email);&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Objects.hash(username, email);&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/unrn/model/TweetTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/unrn/model/TweetTest.java" />
              <option name="originalContent" value="package unrn.model;&#10;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;import java.util.Date;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class TweetTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet se crea correctamente con texto válido y usuario válido&quot;)&#10;    void constructor_creaTweetCorrectamente() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String texto = &quot;Hola mundo&quot;;&#10;        // Ejercitación&#10;        Tweet tweet = new Tweet(texto, user);&#10;        // Verificación&#10;        assertEquals(texto, tweet.getText(), &quot;El texto del tweet debe coincidir&quot;);&#10;        assertTrue(tweet.isUserCreator(user), &quot;El usuario debe ser el creador del tweet&quot;);&#10;        assertNotNull(tweet.getDateCreated(), &quot;La fecha de creación no debe ser nula&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el texto es nulo o vacío&quot;)&#10;    void constructor_lanzaExcepcionSiTextoInvalido() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Ejercitación y Verificación&#10;        var ex1 = assertThrows(RuntimeException.class, () -&gt; new Tweet(null, user));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex1.getMessage(), &quot;Debe lanzar excepción por texto nulo&quot;);&#10;        var ex2 = assertThrows(RuntimeException.class, () -&gt; new Tweet(&quot;&quot;, user));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex2.getMessage(), &quot;Debe lanzar excepción por texto vacío&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el texto supera los 280 caracteres&quot;)&#10;    void constructor_lanzaExcepcionSiTextoMuyLargo() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String textoLargo = &quot;a&quot;.repeat(281);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new Tweet(textoLargo, user));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex.getMessage(), &quot;Debe lanzar excepción por texto demasiado largo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el usuario es nulo&quot;)&#10;    void constructor_lanzaExcepcionSiUsuarioNulo() {&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new Tweet(&quot;Hola&quot;, null));&#10;        assertEquals(Tweet.ERROR_USER_CREATOR_NULL, ex.getMessage(), &quot;Debe lanzar excepción por usuario nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;retweetBy crea un retweet correctamente si el usuario es válido y no es el creador&quot;)&#10;    void retweetBy_creaRetweetCorrectamente() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User retweeter = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación&#10;        ReTweet retweet = tweet.retweetBy(retweeter);&#10;        // Verificación&#10;        assertEquals(tweet, retweet.getOriginalTweet(), &quot;El retweet debe referenciar al tweet original&quot;);&#10;        assertEquals(retweeter, retweet.getUserRetweeted(), &quot;El usuario debe ser el que retuiteó&quot;);&#10;        assertNotNull(retweet.getDate(), &quot;La fecha de retweet no debe ser nula&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;retweetBy lanza excepción si el usuario es nulo&quot;)&#10;    void retweetBy_lanzaExcepcionSiUsuarioNulo() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; tweet.retweetBy(null));&#10;        assertEquals(Tweet.ERROR_USER_RETWEETED_NULL, ex.getMessage(), &quot;Debe lanzar excepción por usuario nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;retweetBy lanza excepción si el usuario es el creador del tweet&quot;)&#10;    void retweetBy_lanzaExcepcionSiUsuarioEsCreador() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; tweet.retweetBy(creador));&#10;        assertEquals(Tweet.ERROR_USER_RETWEET_SELF, ex.getMessage(), &quot;Debe lanzar excepción por retuitear su propio tweet&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getUserCreatorUsername retorna el username del creador correctamente&quot;)&#10;    void getUserCreatorUsername_retornaUsernameCorrectamente() {&#10;        // Setup: Crear usuario y tweet&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola mundo&quot;, user);&#10;        // Ejercitación: Obtener username del creador&#10;        String username = tweet.getUserCreatorUsername();&#10;        // Verificación: El username debe coincidir con el del usuario&#10;        assertEquals(&quot;usuario1&quot;, username, &quot;El username retornado debe ser el del creador del tweet&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet con el mismo id son iguales, con distinto id son distintos&quot;)&#10;    void equals_y_hashCode_funcionanPorId() {&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String id = &quot;id-123&quot;;&#10;        Tweet t1 = new Tweet(id, &quot;texto&quot;, user);&#10;        Tweet t2 = new Tweet(id, &quot;otro texto&quot;, user);&#10;        Tweet t3 = new Tweet(&quot;otro-id&quot;, &quot;texto&quot;, user);&#10;        assertEquals(t1, t2, &quot;Tweets con el mismo id deben ser iguales&quot;);&#10;        assertEquals(t1.hashCode(), t2.hashCode(), &quot;Tweets con el mismo id deben tener el mismo hashCode&quot;);&#10;        assertNotEquals(t1, t3, &quot;Tweets con distinto id deben ser distintos&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getId retorna el id correctamente&quot;)&#10;    void getId_retornaIdCorrectamente() {&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String id = &quot;id-abc&quot;;&#10;        Tweet tweet = new Tweet(id, &quot;texto&quot;, user);&#10;        assertEquals(id, tweet.getId(), &quot;El id retornado debe ser el mismo que el asignado&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweets con mismo tweet de origen y usuario son iguales, si cambia alguno son distintos&quot;)&#10;    void equals_y_hashCode_funcionanPorTweetYUsuario() {&#10;        User user1 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User user2 = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        Tweet tweet1 = new Tweet(&quot;id-1&quot;, &quot;texto&quot;, user1);&#10;        Tweet tweet2 = new Tweet(&quot;id-1&quot;, &quot;otro texto&quot;, user1);&#10;        ReTweet r1 = new ReTweet(user2, tweet1);&#10;        ReTweet r2 = new ReTweet(user2, tweet2);&#10;        Tweet tweet3 = new Tweet(&quot;id-2&quot;, &quot;texto&quot;, user1);&#10;        ReTweet r3 = new ReTweet(user2, tweet3);&#10;        // No se prueba retweet propio porque lanza excepción&#10;        assertEquals(r1, r2, &quot;ReTweets con mismo tweet de origen y usuario deben ser iguales&quot;);&#10;        assertEquals(r1.hashCode(), r2.hashCode(), &quot;ReTweets con mismo tweet de origen y usuario deben tener el mismo hashCode&quot;);&#10;        assertNotEquals(r1, r3, &quot;ReTweets con distinto tweet de origen deben ser distintos&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package unrn.model;&#10;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;import java.util.Date;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class TweetTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet se crea correctamente con texto válido y usuario válido&quot;)&#10;    void constructor_creaTweetCorrectamente() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String texto = &quot;Hola mundo&quot;;&#10;        // Ejercitación&#10;        Tweet tweet = new Tweet(texto, user);&#10;        // Verificación&#10;        assertEquals(texto, tweet.getText(), &quot;El texto del tweet debe coincidir&quot;);&#10;        assertTrue(tweet.isUserCreator(user), &quot;El usuario debe ser el creador del tweet&quot;);&#10;        assertNotNull(tweet.getDateCreated(), &quot;La fecha de creación no debe ser nula&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el texto es nulo o vacío&quot;)&#10;    void constructor_lanzaExcepcionSiTextoInvalido() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Ejercitación y Verificación&#10;        var ex1 = assertThrows(RuntimeException.class, () -&gt; new Tweet(null, user));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex1.getMessage(), &quot;Debe lanzar excepción por texto nulo&quot;);&#10;        var ex2 = assertThrows(RuntimeException.class, () -&gt; new Tweet(&quot;&quot;, user));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex2.getMessage(), &quot;Debe lanzar excepción por texto vacío&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el texto supera los 280 caracteres&quot;)&#10;    void constructor_lanzaExcepcionSiTextoMuyLargo() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String textoLargo = &quot;a&quot;.repeat(281);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new Tweet(textoLargo, user));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex.getMessage(), &quot;Debe lanzar excepción por texto demasiado largo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el usuario es nulo&quot;)&#10;    void constructor_lanzaExcepcionSiUsuarioNulo() {&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new Tweet(&quot;Hola&quot;, null));&#10;        assertEquals(Tweet.ERROR_USER_CREATOR_NULL, ex.getMessage(), &quot;Debe lanzar excepción por usuario nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;retweetBy crea un retweet correctamente si el usuario es válido y no es el creador&quot;)&#10;    void retweetBy_creaRetweetCorrectamente() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User retweeter = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación&#10;        ReTweet retweet = tweet.retweetBy(retweeter);&#10;        // Verificación&#10;        assertEquals(tweet, retweet.getOriginalTweet(), &quot;El retweet debe referenciar al tweet original&quot;);&#10;        assertEquals(retweeter, retweet.getUserRetweeted(), &quot;El usuario debe ser el que retuiteó&quot;);&#10;        assertNotNull(retweet.getDate(), &quot;La fecha de retweet no debe ser nula&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;retweetBy lanza excepción si el usuario es nulo&quot;)&#10;    void retweetBy_lanzaExcepcionSiUsuarioNulo() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; tweet.retweetBy(null));&#10;        assertEquals(Tweet.ERROR_USER_RETWEETED_NULL, ex.getMessage(), &quot;Debe lanzar excepción por usuario nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;retweetBy lanza excepción si el usuario es el creador del tweet&quot;)&#10;    void retweetBy_lanzaExcepcionSiUsuarioEsCreador() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; tweet.retweetBy(creador));&#10;        assertEquals(Tweet.ERROR_USER_RETWEET_SELF, ex.getMessage(), &quot;Debe lanzar excepción por retuitear su propio tweet&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getUserCreatorUsername retorna el username del creador correctamente&quot;)&#10;    void getUserCreatorUsername_retornaUsernameCorrectamente() {&#10;        // Setup: Crear usuario y tweet&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola mundo&quot;, user);&#10;        // Ejercitación: Obtener username del creador&#10;        String username = tweet.getUserCreatorUsername();&#10;        // Verificación: El username debe coincidir con el del usuario&#10;        assertEquals(&quot;usuario1&quot;, username, &quot;El username retornado debe ser el del creador del tweet&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet con el mismo id son iguales, con distinto id son distintos&quot;)&#10;    void equals_y_hashCode_funcionanPorId() {&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String id = &quot;id-123&quot;;&#10;        Tweet t1 = new Tweet(id, &quot;texto&quot;, user);&#10;        Tweet t2 = new Tweet(id, &quot;otro texto&quot;, user);&#10;        Tweet t3 = new Tweet(&quot;otro-id&quot;, &quot;texto&quot;, user);&#10;        assertEquals(t1, t2, &quot;Tweets con el mismo id deben ser iguales&quot;);&#10;        assertEquals(t1.hashCode(), t2.hashCode(), &quot;Tweets con el mismo id deben tener el mismo hashCode&quot;);&#10;        assertNotEquals(t1, t3, &quot;Tweets con distinto id deben ser distintos&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getId retorna el id correctamente&quot;)&#10;    void getId_retornaIdCorrectamente() {&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String id = &quot;id-abc&quot;;&#10;        Tweet tweet = new Tweet(id, &quot;texto&quot;, user);&#10;        assertEquals(id, tweet.getId(), &quot;El id retornado debe ser el mismo que el asignado&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweets con mismo tweet de origen y usuario son iguales, si cambia alguno son distintos&quot;)&#10;    void equals_y_hashCode_funcionanPorTweetYUsuario() {&#10;        User user1 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User user2 = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        Tweet tweet1 = new Tweet(&quot;id-1&quot;, &quot;texto&quot;, user1);&#10;        Tweet tweet2 = new Tweet(&quot;id-1&quot;, &quot;otro texto&quot;, user1);&#10;        ReTweet r1 = new ReTweet(user2, tweet1);&#10;        ReTweet r2 = new ReTweet(user2, tweet2);&#10;        Tweet tweet3 = new Tweet(&quot;id-2&quot;, &quot;texto&quot;, user1);&#10;        ReTweet r3 = new ReTweet(user2, tweet3);&#10;        // No se prueba retweet propio porque lanza excepción&#10;        assertEquals(r1, r2, &quot;ReTweets con mismo tweet de origen y usuario deben ser iguales&quot;);&#10;        assertEquals(r1.hashCode(), r2.hashCode(), &quot;ReTweets con mismo tweet de origen y usuario deben tener el mismo hashCode&quot;);&#10;        assertNotEquals(r1, r3, &quot;ReTweets con distinto tweet de origen deben ser distintos&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el id es nulo&quot;)&#10;    void constructor_lanzaExcepcionSiIdNulo() {&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new Tweet(null, &quot;texto&quot;, user));&#10;        assertEquals(&quot;El id no puede ser nulo o vacío&quot;, ex.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el id es vacío&quot;)&#10;    void constructor_lanzaExcepcionSiIdVacio() {&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new Tweet(&quot;&quot;, &quot;texto&quot;, user));&#10;        assertEquals(&quot;El id no puede ser nulo o vacío&quot;, ex.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el texto es nulo usando constructor con id&quot;)&#10;    void constructorConId_lanzaExcepcionSiTextoNulo() {&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new Tweet(&quot;id-1&quot;, null, user));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el texto es vacío usando constructor con id&quot;)&#10;    void constructorConId_lanzaExcepcionSiTextoVacio() {&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new Tweet(&quot;id-1&quot;, &quot;&quot;, user));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el texto es muy largo usando constructor con id&quot;)&#10;    void constructorConId_lanzaExcepcionSiTextoMuyLargo() {&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String textoLargo = &quot;a&quot;.repeat(281);&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new Tweet(&quot;id-1&quot;, textoLargo, user));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el usuario es nulo usando constructor con id&quot;)&#10;    void constructorConId_lanzaExcepcionSiUsuarioNulo() {&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new Tweet(&quot;id-1&quot;, &quot;texto&quot;, null));&#10;        assertEquals(Tweet.ERROR_USER_CREATOR_NULL, ex.getMessage());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/unrn/model/UserTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/unrn/model/UserTest.java" />
              <option name="originalContent" value="package unrn.model;&#10;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class UserTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;createTweet agrega un tweet correctamente a la lista de tweets del usuario&quot;)&#10;    void createTweet_agregaTweetCorrectamente() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String texto = &quot;Hola mundo&quot;;&#10;        // Ejercitación&#10;        user.createTweet(texto);&#10;        // Verificación&#10;        List&lt;Tweet&gt; tweets = user.getTweets();&#10;        assertEquals(1, tweets.size(), &quot;El usuario debe tener un tweet en la lista&quot;);&#10;        assertEquals(texto, tweets.get(0).getText(), &quot;El texto del tweet no coincide&quot;);&#10;        assertEquals(user, tweets.get(0).isUserCreator(user) ? user : null, &quot;El usuario debe ser el creador del tweet&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;createRetweet agrega un retweet correctamente a la lista de retweets del usuario&quot;)&#10;    void createRetweet_agregaRetweetCorrectamente() {&#10;        // Setup&#10;        User user1 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User user2 = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        user1.createTweet(&quot;Tweet original&quot;);&#10;        Tweet tweet = user1.getTweets().get(0);&#10;        // Ejercitación&#10;        user2.createRetweet(tweet);&#10;        // Verificación&#10;        List&lt;ReTweet&gt; retweets = user2.getRetweets();&#10;        assertEquals(1, retweets.size(), &quot;El usuario debe tener un retweet en la lista&quot;);&#10;        assertEquals(tweet, retweets.get(0).getOriginalTweet(), &quot;El retweet debe referenciar al tweet original&quot;);&#10;        assertEquals(user2, retweets.get(0).getUserRetweeted(), &quot;El usuario debe ser el que retuiteó&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;createRetweet lanza excepción si el usuario intenta retuitear su propio tweet&quot;)&#10;    void createRetweet_lanzaExcepcionSiRetuiteaPropioTweet() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        user.createTweet(&quot;Tweet propio&quot;);&#10;        Tweet tweet = user.getTweets().get(0);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; user.createRetweet(tweet));&#10;        assertEquals(ReTweet.ERROR_USER_RETWEET_SELF, ex.getMessage(), &quot;Debe lanzar excepción por retuitear su propio tweet&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getUsername retorna el nombre de usuario correctamente&quot;)&#10;    void getUsername_retornaUsernameCorrectamente() {&#10;        // Setup&#10;        String username = &quot;usuario1&quot;;&#10;        User user = new User(username, &quot;mail@mail.com&quot;);&#10;        // Ejercitación&#10;        String result = user.getUsername();&#10;        // Verificación&#10;        assertEquals(username, result, &quot;El username retornado no es correcto&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getTweets retorna lista vacía si el usuario no tiene tweets&quot;)&#10;    void getTweets_listaVaciaSiNoTieneTweets() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Ejercitación&#10;        List&lt;Tweet&gt; tweets = user.getTweets();&#10;        // Verificación&#10;        assertTrue(tweets.isEmpty(), &quot;La lista de tweets debe estar vacía&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getRetweets retorna lista vacía si el usuario no tiene retweets&quot;)&#10;    void getRetweets_listaVaciaSiNoTieneRetweets() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Ejercitación&#10;        List&lt;ReTweet&gt; retweets = user.getRetweets();&#10;        // Verificación&#10;        assertTrue(retweets.isEmpty(), &quot;La lista de retweets debe estar vacía&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getTweets retorna la lista de tweets del usuario&quot;)&#10;    void getTweets_retornaListaDeTweets() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        user.createTweet(&quot;Tweet 1&quot;);&#10;        user.createTweet(&quot;Tweet 2&quot;);&#10;        // Ejercitación&#10;        List&lt;Tweet&gt; tweets = user.getTweets();&#10;        // Verificación&#10;        assertEquals(2, tweets.size(), &quot;El usuario debe tener dos tweets en la lista&quot;);&#10;        assertEquals(&quot;Tweet 1&quot;, tweets.get(0).getText(), &quot;El primer tweet debe ser 'Tweet 1'&quot;);&#10;        assertEquals(&quot;Tweet 2&quot;, tweets.get(1).getText(), &quot;El segundo tweet debe ser 'Tweet 2'&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getRetweets retorna la lista de retweets del usuario&quot;)&#10;    void getRetweets_retornaListaDeRetweets() {&#10;        // Setup&#10;        User user1 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User user2 = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        user1.createTweet(&quot;Tweet original&quot;);&#10;        Tweet tweet = user1.getTweets().get(0);&#10;        user2.createRetweet(tweet);&#10;        // Ejercitación&#10;        List&lt;ReTweet&gt; retweets = user2.getRetweets();&#10;        // Verificación&#10;        assertEquals(1, retweets.size(), &quot;El usuario debe tener un retweet en la lista&quot;);&#10;        assertEquals(tweet, retweets.get(0).getOriginalTweet(), &quot;El retweet debe referenciar al tweet original&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getUserName retorna el nombre de usuario correctamente&quot;)&#10;    void getUserName_retornaNombreDeUsuario() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Ejercitación&#10;        String username = user.getUsername();&#10;        // Verificación&#10;        assertEquals(&quot;usuario1&quot;, username, &quot;El nombre de usuario debe ser 'usuario1'&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;userName no puede ser menor a 5 ni mayor a 25 caracteres&quot;)&#10;    void userNameLongitudInvalida_lanzaExcepcion() {&#10;        // Setup, Ejercitación y Verificación&#10;        var ex1 = assertThrows(RuntimeException.class, () -&gt; {&#10;            new User(&quot;abc&quot;, &quot;mail@mail.com&quot;);&#10;        });&#10;        assertEquals(User.ERROR_USERNAME_SHORT, ex1.getMessage());&#10;        var ex2 = assertThrows(RuntimeException.class, () -&gt; {&#10;            new User(&quot;a12345678901234567890123456&quot;, &quot;mail@mail.com&quot;);&#10;        });&#10;        assertEquals(User.ERROR_USERNAME_LONG, ex2.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Eliminar usuario elimina todos sus tweets y retweets&quot;)&#10;    void eliminarUsuario_eliminaTweetsYRetweets() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        user.createTweet(&quot;Tweet 1&quot;);&#10;        user.createTweet(&quot;Tweet 2&quot;);&#10;        assertEquals(2, user.getTweets().size(), &quot;Debe tener 2 tweets antes de eliminar&quot;);&#10;        // Ejercitación&#10;        user.delete();&#10;        // Verificación&#10;        assertTrue(user.getTweets().isEmpty(), &quot;Los tweets deben eliminarse al borrar el usuario&quot;);&#10;        assertTrue(user.getRetweets().isEmpty(), &quot;Los retweets deben eliminarse al borrar el usuario&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;No se puede crear tweet con texto menor a 1 o mayor a 280 caracteres desde User&quot;)&#10;    void createTweet_textoInvalido_lanzaExcepcion() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Ejercitación y Verificación&#10;        var ex1 = assertThrows(RuntimeException.class, () -&gt; user.createTweet(&quot;&quot;));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex1.getMessage());&#10;        var ex2 = assertThrows(RuntimeException.class, () -&gt; user.createTweet(&quot;a&quot;.repeat(281)));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex2.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;No se puede crear usuario con username nulo o vacío&quot;)&#10;    void crearUsuario_usernameNuloOVacio_lanzaExcepcion() {&#10;        // Ejercitación y Verificación&#10;        var ex1 = assertThrows(RuntimeException.class, () -&gt; new User(null, &quot;mail@mail.com&quot;));&#10;        assertEquals(User.ERROR_USERNAME_EMPTY, ex1.getMessage());&#10;        var ex2 = assertThrows(RuntimeException.class, () -&gt; new User(&quot;&quot;, &quot;mail@mail.com&quot;));&#10;        assertEquals(User.ERROR_USERNAME_EMPTY, ex2.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;No se puede crear usuario con username menor a 5 caracteres&quot;)&#10;    void crearUsuario_usernameMenorA5_lanzaExcepcion() {&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new User(&quot;abcd&quot;, &quot;mail@mail.com&quot;));&#10;        assertEquals(User.ERROR_USERNAME_SHORT, ex.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;No se puede crear usuario con username mayor a 25 caracteres&quot;)&#10;    void crearUsuario_usernameMayorA25_lanzaExcepcion() {&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new User(&quot;a12345678901234567890123456&quot;, &quot;mail@mail.com&quot;));&#10;        assertEquals(User.ERROR_USERNAME_LONG, ex.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;No se puede crear usuario con email nulo o vacío&quot;)&#10;    void crearUsuario_emailNuloOVacio_lanzaExcepcion() {&#10;        // Ejercitación y Verificación&#10;        var ex1 = assertThrows(RuntimeException.class, () -&gt; new User(&quot;usuario1&quot;, null));&#10;        assertEquals(User.ERROR_EMAIL_EMPTY, ex1.getMessage());&#10;        var ex2 = assertThrows(RuntimeException.class, () -&gt; new User(&quot;usuario1&quot;, &quot;&quot;));&#10;        assertEquals(User.ERROR_EMAIL_EMPTY, ex2.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;No se agrega dos veces el mismo tweet (objeto) a la lista de tweets del usuario&quot;)&#10;    void createTweet_noAgregaMismoObjetoTweetDuplicado() {&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Tweet único&quot;, user);&#10;        user.getTweets().add(tweet);&#10;        // Intenta agregar el mismo objeto Tweet&#10;        if (!user.getTweets().contains(tweet)) {&#10;            user.getTweets().add(tweet);&#10;        }&#10;        assertEquals(1, user.getTweets().size(), &quot;No debe agregarse dos veces el mismo objeto tweet&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;No se agrega dos veces un tweet con el mismo id a la lista de tweets del usuario&quot;)&#10;    void createTweet_noAgregaTweetConMismoIdDuplicado() {&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String id = &quot;id-1&quot;;&#10;        Tweet tweet1 = new Tweet(id, &quot;texto&quot;, user);&#10;        Tweet tweet2 = new Tweet(id, &quot;otro texto&quot;, user);&#10;        user.getTweets().add(tweet1);&#10;        // Intenta agregar otro tweet con el mismo id&#10;        if (!user.getTweets().contains(tweet2)) {&#10;            user.getTweets().add(tweet2);&#10;        }&#10;        assertEquals(1, user.getTweets().size(), &quot;No debe agregarse dos veces un tweet con el mismo id&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;No se agrega dos veces el mismo retweet (mismo tweet de origen y usuario) a la lista de retweets del usuario&quot;)&#10;    void createRetweet_noAgregaMismoRetweetDuplicado() {&#10;        User user1 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User user2 = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        Tweet tweet1 = new Tweet(&quot;id-1&quot;, &quot;texto&quot;, user1);&#10;        Tweet tweet2 = new Tweet(&quot;id-1&quot;, &quot;otro texto&quot;, user1);&#10;        ReTweet retweet1 = new ReTweet(user2, tweet1);&#10;        ReTweet retweet2 = new ReTweet(user2, tweet2);&#10;        user2.getRetweets().add(retweet1);&#10;        // Intenta agregar otro retweet con el mismo tweet de origen y usuario&#10;        if (!user2.getRetweets().contains(retweet2)) {&#10;            user2.getRetweets().add(retweet2);&#10;        }&#10;        assertEquals(1, user2.getRetweets().size(), &quot;No debe agregarse dos veces el mismo retweet (mismo tweet de origen y usuario)&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Usuarios iguales tienen el mismo hashCode&quot;)&#10;    void usuariosIguales_tienenMismoHashCode() {&#10;        // Setup&#10;        User user1 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User user2 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Verificación&#10;        assertEquals(user1.hashCode(), user2.hashCode(), &quot;Usuarios iguales deben tener el mismo hashCode&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Usuarios distintos tienen hashCodes diferentes&quot;)&#10;    void usuariosDistintos_tienenHashCodesDiferentes() {&#10;        // Setup&#10;        User user1 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User user2 = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        // Verificación&#10;        assertNotEquals(user1.hashCode(), user2.hashCode(), &quot;Usuarios distintos deben tener hashCodes diferentes&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package unrn.model;&#10;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class UserTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;createTweet agrega un tweet correctamente a la lista de tweets del usuario&quot;)&#10;    void createTweet_agregaTweetCorrectamente() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String texto = &quot;Hola mundo&quot;;&#10;        // Ejercitación&#10;        user.createTweet(texto);&#10;        // Verificación&#10;        List&lt;Tweet&gt; tweets = user.getTweets();&#10;        assertEquals(1, tweets.size(), &quot;El usuario debe tener un tweet en la lista&quot;);&#10;        assertEquals(texto, tweets.get(0).getText(), &quot;El texto del tweet no coincide&quot;);&#10;        assertEquals(user, tweets.get(0).isUserCreator(user) ? user : null, &quot;El usuario debe ser el creador del tweet&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;createRetweet agrega un retweet correctamente a la lista de retweets del usuario&quot;)&#10;    void createRetweet_agregaRetweetCorrectamente() {&#10;        // Setup&#10;        User user1 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User user2 = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        user1.createTweet(&quot;Tweet original&quot;);&#10;        Tweet tweet = user1.getTweets().get(0);&#10;        // Ejercitación&#10;        user2.createRetweet(tweet);&#10;        // Verificación&#10;        List&lt;ReTweet&gt; retweets = user2.getRetweets();&#10;        assertEquals(1, retweets.size(), &quot;El usuario debe tener un retweet en la lista&quot;);&#10;        assertEquals(tweet, retweets.get(0).getOriginalTweet(), &quot;El retweet debe referenciar al tweet original&quot;);&#10;        assertEquals(user2, retweets.get(0).getUserRetweeted(), &quot;El usuario debe ser el que retuiteó&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;createRetweet lanza excepción si el usuario intenta retuitear su propio tweet&quot;)&#10;    void createRetweet_lanzaExcepcionSiRetuiteaPropioTweet() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        user.createTweet(&quot;Tweet propio&quot;);&#10;        Tweet tweet = user.getTweets().get(0);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; user.createRetweet(tweet));&#10;        assertEquals(ReTweet.ERROR_USER_RETWEET_SELF, ex.getMessage(), &quot;Debe lanzar excepción por retuitear su propio tweet&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getUsername retorna el nombre de usuario correctamente&quot;)&#10;    void getUsername_retornaUsernameCorrectamente() {&#10;        // Setup&#10;        String username = &quot;usuario1&quot;;&#10;        User user = new User(username, &quot;mail@mail.com&quot;);&#10;        // Ejercitación&#10;        String result = user.getUsername();&#10;        // Verificación&#10;        assertEquals(username, result, &quot;El username retornado no es correcto&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getTweets retorna lista vacía si el usuario no tiene tweets&quot;)&#10;    void getTweets_listaVaciaSiNoTieneTweets() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Ejercitación&#10;        List&lt;Tweet&gt; tweets = user.getTweets();&#10;        // Verificación&#10;        assertTrue(tweets.isEmpty(), &quot;La lista de tweets debe estar vacía&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getRetweets retorna lista vacía si el usuario no tiene retweets&quot;)&#10;    void getRetweets_listaVaciaSiNoTieneRetweets() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Ejercitación&#10;        List&lt;ReTweet&gt; retweets = user.getRetweets();&#10;        // Verificación&#10;        assertTrue(retweets.isEmpty(), &quot;La lista de retweets debe estar vacía&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getTweets retorna la lista de tweets del usuario&quot;)&#10;    void getTweets_retornaListaDeTweets() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        user.createTweet(&quot;Tweet 1&quot;);&#10;        user.createTweet(&quot;Tweet 2&quot;);&#10;        // Ejercitación&#10;        List&lt;Tweet&gt; tweets = user.getTweets();&#10;        // Verificación&#10;        assertEquals(2, tweets.size(), &quot;El usuario debe tener dos tweets en la lista&quot;);&#10;        assertEquals(&quot;Tweet 1&quot;, tweets.get(0).getText(), &quot;El primer tweet debe ser 'Tweet 1'&quot;);&#10;        assertEquals(&quot;Tweet 2&quot;, tweets.get(1).getText(), &quot;El segundo tweet debe ser 'Tweet 2'&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getRetweets retorna la lista de retweets del usuario&quot;)&#10;    void getRetweets_retornaListaDeRetweets() {&#10;        // Setup&#10;        User user1 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User user2 = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        user1.createTweet(&quot;Tweet original&quot;);&#10;        Tweet tweet = user1.getTweets().get(0);&#10;        user2.createRetweet(tweet);&#10;        // Ejercitación&#10;        List&lt;ReTweet&gt; retweets = user2.getRetweets();&#10;        // Verificación&#10;        assertEquals(1, retweets.size(), &quot;El usuario debe tener un retweet en la lista&quot;);&#10;        assertEquals(tweet, retweets.get(0).getOriginalTweet(), &quot;El retweet debe referenciar al tweet original&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getUserName retorna el nombre de usuario correctamente&quot;)&#10;    void getUserName_retornaNombreDeUsuario() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Ejercitación&#10;        String username = user.getUsername();&#10;        // Verificación&#10;        assertEquals(&quot;usuario1&quot;, username, &quot;El nombre de usuario debe ser 'usuario1'&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;userName no puede ser menor a 5 ni mayor a 25 caracteres&quot;)&#10;    void userNameLongitudInvalida_lanzaExcepcion() {&#10;        // Setup, Ejercitación y Verificación&#10;        var ex1 = assertThrows(RuntimeException.class, () -&gt; {&#10;            new User(&quot;abc&quot;, &quot;mail@mail.com&quot;);&#10;        });&#10;        assertEquals(User.ERROR_USERNAME_SHORT, ex1.getMessage());&#10;        var ex2 = assertThrows(RuntimeException.class, () -&gt; {&#10;            new User(&quot;a12345678901234567890123456&quot;, &quot;mail@mail.com&quot;);&#10;        });&#10;        assertEquals(User.ERROR_USERNAME_LONG, ex2.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Eliminar usuario elimina todos sus tweets y retweets&quot;)&#10;    void eliminarUsuario_eliminaTweetsYRetweets() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        user.createTweet(&quot;Tweet 1&quot;);&#10;        user.createTweet(&quot;Tweet 2&quot;);&#10;        assertEquals(2, user.getTweets().size(), &quot;Debe tener 2 tweets antes de eliminar&quot;);&#10;        // Ejercitación&#10;        user.delete();&#10;        // Verificación&#10;        assertTrue(user.getTweets().isEmpty(), &quot;Los tweets deben eliminarse al borrar el usuario&quot;);&#10;        assertTrue(user.getRetweets().isEmpty(), &quot;Los retweets deben eliminarse al borrar el usuario&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;No se puede crear tweet con texto menor a 1 o mayor a 280 caracteres desde User&quot;)&#10;    void createTweet_textoInvalido_lanzaExcepcion() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Ejercitación y Verificación&#10;        var ex1 = assertThrows(RuntimeException.class, () -&gt; user.createTweet(&quot;&quot;));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex1.getMessage());&#10;        var ex2 = assertThrows(RuntimeException.class, () -&gt; user.createTweet(&quot;a&quot;.repeat(281)));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex2.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;No se puede crear usuario con username nulo o vacío&quot;)&#10;    void crearUsuario_usernameNuloOVacio_lanzaExcepcion() {&#10;        // Ejercitación y Verificación&#10;        var ex1 = assertThrows(RuntimeException.class, () -&gt; new User(null, &quot;mail@mail.com&quot;));&#10;        assertEquals(User.ERROR_USERNAME_EMPTY, ex1.getMessage());&#10;        var ex2 = assertThrows(RuntimeException.class, () -&gt; new User(&quot;&quot;, &quot;mail@mail.com&quot;));&#10;        assertEquals(User.ERROR_USERNAME_EMPTY, ex2.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;No se puede crear usuario con username menor a 5 caracteres&quot;)&#10;    void crearUsuario_usernameMenorA5_lanzaExcepcion() {&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new User(&quot;abcd&quot;, &quot;mail@mail.com&quot;));&#10;        assertEquals(User.ERROR_USERNAME_SHORT, ex.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;No se puede crear usuario con username mayor a 25 caracteres&quot;)&#10;    void crearUsuario_usernameMayorA25_lanzaExcepcion() {&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new User(&quot;a12345678901234567890123456&quot;, &quot;mail@mail.com&quot;));&#10;        assertEquals(User.ERROR_USERNAME_LONG, ex.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;No se puede crear usuario con email nulo o vacío&quot;)&#10;    void crearUsuario_emailNuloOVacio_lanzaExcepcion() {&#10;        // Ejercitación y Verificación&#10;        var ex1 = assertThrows(RuntimeException.class, () -&gt; new User(&quot;usuario1&quot;, null));&#10;        assertEquals(User.ERROR_EMAIL_EMPTY, ex1.getMessage());&#10;        var ex2 = assertThrows(RuntimeException.class, () -&gt; new User(&quot;usuario1&quot;, &quot;&quot;));&#10;        assertEquals(User.ERROR_EMAIL_EMPTY, ex2.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;No se agrega dos veces el mismo tweet (objeto) a la lista de tweets del usuario&quot;)&#10;    void createTweet_noAgregaMismoObjetoTweetDuplicado() {&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Tweet único&quot;, user);&#10;        user.getTweets().add(tweet);&#10;        // Intenta agregar el mismo objeto Tweet&#10;        if (!user.getTweets().contains(tweet)) {&#10;            user.getTweets().add(tweet);&#10;        }&#10;        assertEquals(1, user.getTweets().size(), &quot;No debe agregarse dos veces el mismo objeto tweet&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;No se agrega dos veces un tweet con el mismo id a la lista de tweets del usuario&quot;)&#10;    void createTweet_noAgregaTweetConMismoIdDuplicado() {&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String id = &quot;id-1&quot;;&#10;        Tweet tweet1 = new Tweet(id, &quot;texto&quot;, user);&#10;        Tweet tweet2 = new Tweet(id, &quot;otro texto&quot;, user);&#10;        user.getTweets().add(tweet1);&#10;        // Intenta agregar otro tweet con el mismo id&#10;        if (!user.getTweets().contains(tweet2)) {&#10;            user.getTweets().add(tweet2);&#10;        }&#10;        assertEquals(1, user.getTweets().size(), &quot;No debe agregarse dos veces un tweet con el mismo id&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;No se agrega dos veces el mismo retweet (mismo tweet de origen y usuario) a la lista de retweets del usuario&quot;)&#10;    void createRetweet_noAgregaMismoRetweetDuplicado() {&#10;        User user1 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User user2 = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        Tweet tweet1 = new Tweet(&quot;id-1&quot;, &quot;texto&quot;, user1);&#10;        Tweet tweet2 = new Tweet(&quot;id-1&quot;, &quot;otro texto&quot;, user1);&#10;        ReTweet retweet1 = new ReTweet(user2, tweet1);&#10;        ReTweet retweet2 = new ReTweet(user2, tweet2);&#10;        user2.getRetweets().add(retweet1);&#10;        // Intenta agregar otro retweet con el mismo tweet de origen y usuario&#10;        if (!user2.getRetweets().contains(retweet2)) {&#10;            user2.getRetweets().add(retweet2);&#10;        }&#10;        assertEquals(1, user2.getRetweets().size(), &quot;No debe agregarse dos veces el mismo retweet (mismo tweet de origen y usuario)&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;createTweet lanza excepción si se intenta agregar un tweet duplicado (mismo id)&quot;)&#10;    void createTweet_lanzaExcepcionSiTweetDuplicado() {&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String id = &quot;id-1&quot;;&#10;        Tweet tweet1 = new Tweet(id, &quot;texto&quot;, user);&#10;        Tweet tweet2 = new Tweet(id, &quot;otro texto&quot;, user);&#10;        user.getTweets().add(tweet1);&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; {&#10;            if (!user.getTweets().contains(tweet2)) {&#10;                user.getTweets().add(tweet2);&#10;            } else {&#10;                throw new RuntimeException(User.ERROR_TWEET_DUPLICATE);&#10;            }&#10;        });&#10;        assertEquals(User.ERROR_TWEET_DUPLICATE, ex.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;createRetweet lanza excepción si se intenta agregar un retweet duplicado (mismo tweet de origen y usuario)&quot;)&#10;    void createRetweet_lanzaExcepcionSiRetweetDuplicado() {&#10;        User user1 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User user2 = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        Tweet tweet1 = new Tweet(&quot;id-1&quot;, &quot;texto&quot;, user1);&#10;        Tweet tweet2 = new Tweet(&quot;id-1&quot;, &quot;otro texto&quot;, user1);&#10;        ReTweet retweet1 = new ReTweet(user2, tweet1);&#10;        ReTweet retweet2 = new ReTweet(user2, tweet2);&#10;        user2.getRetweets().add(retweet1);&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; {&#10;            if (!user2.getRetweets().contains(retweet2)) {&#10;                user2.getRetweets().add(retweet2);&#10;            } else {&#10;                throw new RuntimeException(User.ERROR_RETWEET_DUPLICATE);&#10;            }&#10;        });&#10;        assertEquals(User.ERROR_RETWEET_DUPLICATE, ex.getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Usuarios iguales tienen el mismo hashCode&quot;)&#10;    void usuariosIguales_tienenMismoHashCode() {&#10;        // Setup&#10;        User user1 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User user2 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Verificación&#10;        assertEquals(user1.hashCode(), user2.hashCode(), &quot;Usuarios iguales deben tener el mismo hashCode&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Usuarios distintos tienen hashCodes diferentes&quot;)&#10;    void usuariosDistintos_tienenHashCodesDiferentes() {&#10;        // Setup&#10;        User user1 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User user2 = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        // Verificación&#10;        assertNotEquals(user1.hashCode(), user2.hashCode(), &quot;Usuarios distintos deben tener hashCodes diferentes&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test/java/unrn/model/ReTweetTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test/java/unrn/model/ReTweetTest.java" />
              <option name="originalContent" value="package unrn.model;&#10;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class ReTweetTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweet se crea correctamente con usuario y tweet original válidos&quot;)&#10;    void constructor_creaReTweetCorrectamente() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User retweeter = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación&#10;        ReTweet retweet = new ReTweet(retweeter, tweet);&#10;        // Verificación&#10;        assertEquals(tweet, retweet.getOriginalTweet(), &quot;El retweet debe referenciar al tweet original&quot;);&#10;        assertEquals(retweeter, retweet.getUserRetweeted(), &quot;El usuario debe ser el que retuiteó&quot;);&#10;        assertNotNull(retweet.getDate(), &quot;La fecha de retweet no debe ser nula&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweet lanza excepción si el tweet original es nulo&quot;)&#10;    void constructor_lanzaExcepcionSiTweetOriginalNulo() {&#10;        // Setup&#10;        User retweeter = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new ReTweet(retweeter, null));&#10;        assertEquals(ReTweet.ERROR_ORIGINAL_TWEET_NULL, ex.getMessage(), &quot;Debe lanzar excepción por tweet original nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweet lanza excepción si el usuario es nulo&quot;)&#10;    void constructor_lanzaExcepcionSiUsuarioNulo() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new ReTweet(null, tweet));&#10;        assertEquals(ReTweet.ERROR_USER_RETWEET_NULL, ex.getMessage(), &quot;Debe lanzar excepción por usuario nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweet lanza excepción si el usuario es el creador del tweet original&quot;)&#10;    void constructor_lanzaExcepcionSiUsuarioEsCreador() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new ReTweet(creador, tweet));&#10;        assertEquals(ReTweet.ERROR_USER_RETWEET_SELF, ex.getMessage(), &quot;Debe lanzar excepción por retuitear su propio tweet&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package unrn.model;&#10;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class ReTweetTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweet se crea correctamente con usuario y tweet original válidos&quot;)&#10;    void constructor_creaReTweetCorrectamente() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User retweeter = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación&#10;        ReTweet retweet = new ReTweet(retweeter, tweet);&#10;        // Verificación&#10;        assertEquals(tweet, retweet.getOriginalTweet(), &quot;El retweet debe referenciar al tweet original&quot;);&#10;        assertEquals(retweeter, retweet.getUserRetweeted(), &quot;El usuario debe ser el que retuiteó&quot;);&#10;        assertNotNull(retweet.getDate(), &quot;La fecha de retweet no debe ser nula&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweet lanza excepción si el tweet original es nulo&quot;)&#10;    void constructor_lanzaExcepcionSiTweetOriginalNulo() {&#10;        // Setup&#10;        User retweeter = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new ReTweet(retweeter, null));&#10;        assertEquals(ReTweet.ERROR_ORIGINAL_TWEET_NULL, ex.getMessage(), &quot;Debe lanzar excepción por tweet original nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweet lanza excepción si el usuario es nulo&quot;)&#10;    void constructor_lanzaExcepcionSiUsuarioNulo() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new ReTweet(null, tweet));&#10;        assertEquals(ReTweet.ERROR_USER_RETWEET_NULL, ex.getMessage(), &quot;Debe lanzar excepción por usuario nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweet lanza excepción si el usuario es el creador del tweet original&quot;)&#10;    void constructor_lanzaExcepcionSiUsuarioEsCreador() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new ReTweet(creador, tweet));&#10;        assertEquals(ReTweet.ERROR_USER_RETWEET_SELF, ex.getMessage(), &quot;Debe lanzar excepción por retuitear su propio tweet&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test/java/unrn/model/TweetTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test/java/unrn/model/TweetTest.java" />
              <option name="updatedContent" value="package unrn.model;&#10;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;import java.util.Date;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class TweetTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet se crea correctamente con texto válido y usuario válido&quot;)&#10;    void constructor_creaTweetCorrectamente() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String texto = &quot;Hola mundo&quot;;&#10;        // Ejercitación&#10;        Tweet tweet = new Tweet(texto, user);&#10;        // Verificación&#10;        assertEquals(texto, tweet.getText(), &quot;El texto del tweet debe coincidir&quot;);&#10;        assertTrue(tweet.isUserCreator(user), &quot;El usuario debe ser el creador del tweet&quot;);&#10;        assertNotNull(tweet.getDateCreated(), &quot;La fecha de creación no debe ser nula&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el texto es nulo o vacío&quot;)&#10;    void constructor_lanzaExcepcionSiTextoInvalido() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Ejercitación y Verificación&#10;        var ex1 = assertThrows(RuntimeException.class, () -&gt; new Tweet(null, user));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex1.getMessage(), &quot;Debe lanzar excepción por texto nulo&quot;);&#10;        var ex2 = assertThrows(RuntimeException.class, () -&gt; new Tweet(&quot;&quot;, user));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex2.getMessage(), &quot;Debe lanzar excepción por texto vacío&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el texto supera los 280 caracteres&quot;)&#10;    void constructor_lanzaExcepcionSiTextoMuyLargo() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String textoLargo = &quot;a&quot;.repeat(281);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new Tweet(textoLargo, user));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex.getMessage(), &quot;Debe lanzar excepción por texto demasiado largo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el usuario es nulo&quot;)&#10;    void constructor_lanzaExcepcionSiUsuarioNulo() {&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new Tweet(&quot;Hola&quot;, null));&#10;        assertEquals(Tweet.ERROR_USER_CREATOR_NULL, ex.getMessage(), &quot;Debe lanzar excepción por usuario nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;retweetBy crea un retweet correctamente si el usuario es válido y no es el creador&quot;)&#10;    void retweetBy_creaRetweetCorrectamente() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User retweeter = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación&#10;        ReTweet retweet = tweet.retweetBy(retweeter);&#10;        // Verificación&#10;        assertEquals(tweet, retweet.getOriginalTweet(), &quot;El retweet debe referenciar al tweet original&quot;);&#10;        assertEquals(retweeter, retweet.getUserRetweeted(), &quot;El usuario debe ser el que retuiteó&quot;);&#10;        assertNotNull(retweet.getDate(), &quot;La fecha de retweet no debe ser nula&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;retweetBy lanza excepción si el usuario es nulo&quot;)&#10;    void retweetBy_lanzaExcepcionSiUsuarioNulo() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; tweet.retweetBy(null));&#10;        assertEquals(Tweet.ERROR_USER_RETWEETED_NULL, ex.getMessage(), &quot;Debe lanzar excepción por usuario nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;retweetBy lanza excepción si el usuario es el creador del tweet&quot;)&#10;    void retweetBy_lanzaExcepcionSiUsuarioEsCreador() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; tweet.retweetBy(creador));&#10;        assertEquals(Tweet.ERROR_USER_RETWEET_SELF, ex.getMessage(), &quot;Debe lanzar excepción por retuitear su propio tweet&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test/java/unrn/model/UserTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test/java/unrn/model/UserTest.java" />
              <option name="updatedContent" value="package unrn.model;&#10;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import java.util.List;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class UserTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;createTweet agrega un tweet correctamente a la lista de tweets del usuario&quot;)&#10;    void createTweet_agregaTweetCorrectamente() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String texto = &quot;Hola mundo&quot;;&#10;        // Ejercitación&#10;        user.createTweet(texto);&#10;        // Verificación&#10;        List&lt;Tweet&gt; tweets = user.getTweets();&#10;        assertEquals(1, tweets.size(), &quot;El usuario debe tener un tweet en la lista&quot;);&#10;        assertEquals(texto, tweets.get(0).getText(), &quot;El texto del tweet no coincide&quot;);&#10;        assertEquals(user, tweets.get(0).isUserCreator(user) ? user : null, &quot;El usuario debe ser el creador del tweet&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;createRetweet agrega un retweet correctamente a la lista de retweets del usuario&quot;)&#10;    void createRetweet_agregaRetweetCorrectamente() {&#10;        // Setup&#10;        User user1 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User user2 = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        user1.createTweet(&quot;Tweet original&quot;);&#10;        Tweet tweet = user1.getTweets().get(0);&#10;        // Ejercitación&#10;        user2.createRetweet(tweet);&#10;        // Verificación&#10;        List&lt;ReTweet&gt; retweets = user2.getRetweets();&#10;        assertEquals(1, retweets.size(), &quot;El usuario debe tener un retweet en la lista&quot;);&#10;        assertEquals(tweet, retweets.get(0).getOriginalTweet(), &quot;El retweet debe referenciar al tweet original&quot;);&#10;        assertEquals(user2, retweets.get(0).getUserRetweeted(), &quot;El usuario debe ser el que retuiteó&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;createRetweet lanza excepción si el usuario intenta retuitear su propio tweet&quot;)&#10;    void createRetweet_lanzaExcepcionSiRetuiteaPropioTweet() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        user.createTweet(&quot;Tweet propio&quot;);&#10;        Tweet tweet = user.getTweets().get(0);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; user.createRetweet(tweet));&#10;        assertEquals(ReTweet.ERROR_USER_RETWEET_SELF, ex.getMessage(), &quot;Debe lanzar excepción por retuitear su propio tweet&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getUsername retorna el nombre de usuario correctamente&quot;)&#10;    void getUsername_retornaUsernameCorrectamente() {&#10;        // Setup&#10;        String username = &quot;usuario1&quot;;&#10;        User user = new User(username, &quot;mail@mail.com&quot;);&#10;        // Ejercitación&#10;        String result = user.getUsername();&#10;        // Verificación&#10;        assertEquals(username, result, &quot;El username retornado no es correcto&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getTweets retorna lista vacía si el usuario no tiene tweets&quot;)&#10;    void getTweets_listaVaciaSiNoTieneTweets() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Ejercitación&#10;        List&lt;Tweet&gt; tweets = user.getTweets();&#10;        // Verificación&#10;        assertTrue(tweets.isEmpty(), &quot;La lista de tweets debe estar vacía&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getRetweets retorna lista vacía si el usuario no tiene retweets&quot;)&#10;    void getRetweets_listaVaciaSiNoTieneRetweets() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Ejercitación&#10;        List&lt;ReTweet&gt; retweets = user.getRetweets();&#10;        // Verificación&#10;        assertTrue(retweets.isEmpty(), &quot;La lista de retweets debe estar vacía&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>