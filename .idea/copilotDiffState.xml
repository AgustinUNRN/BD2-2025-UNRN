<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Mini Twitter - TP Individual&#10;&#10;## Autor&#10;**Agustín Fernández Gómez**&#10;&#10;---&#10;&#10;## Consigna&#10;&#10;**Universidad Nacional de Río Negro**  &#10;Taller de Tecnologías y Producción de Software  &#10;Lic. En Sistemas&#10;&#10;### Trabajo Práctico General&#10;&#10;Vamos a construir una versión muy simplificada de Twitter con una arquitectura monolítica de back-end. El back-end y el front-end son aplicaciones separadas que se comunican vía servicios web.&#10;&#10;### Requerimientos a modelar&#10;&#10;1. Cada usuario conoce todos los Tweets que hizo.&#10;2. Un tweet puede ser re-tweet de otro, y este tweet debe conocer a su tweet de origen.&#10;3. Un re-tweet no tiene texto adicional.&#10;4. Los tweets de un usuario se deben eliminar cuando el usuario es eliminado. No existen tweets no referenciados por un usuario.&#10;5. No se pueden agregar dos usuarios con el mismo userName.&#10;6. userName no puede ser menor a 5 caracteres ni mayor a 25.&#10;7. Los tweets deben tener un texto de 1 carácter como mínimo y 280 caracteres como máximo.&#10;8. No se debe permitir crear un re-tweet de un tweet creado por el mismo usuario que re-twittea.&#10;&#10;### Se pide&#10;&#10;1. Modelar en objetos.&#10;2. Escribir test unitarios.&#10;3. Mapear para persistir y generar los servicios de backend.&#10;4. Escribir test de integración usando una BD en memoria.&#10;5. Exponer los servicios de backend como Servicios Web.&#10;6. Escribir test de integración de la capa Web.&#10;7. Lograr cobertura alta (&gt;= 90%).&#10;8. Implementar el front-end cuya navegabilidad se describe más adelante.&#10;&#10;---&#10;&#10;## Front-end&#10;&#10;La home page debe tener la siguiente estructura:&#10;&#10;- **Header Menú**:&#10;  - Nombre del sistema&#10;  - Link a la home page&#10;  - Link para crear un nuevo tweet&#10;&#10;- **Panel principal**:&#10;  - Se muestran los tweets (no incluir ReTweets) de cualquier usuario, paginados de a 10 por página.&#10;  - Navegación de paginación (adelante/atrás, botones deshabilitados si no hay más).&#10;&#10;- **Panel izquierdo**:&#10;  - Lista de usuarios del sistema (solo userNames).&#10;  - Al clickear en un usuario, se muestran sus últimos 15 tweets en el panel principal.&#10;  - Si es re-tweet, mostrar la fecha de retweet, el nombre del usuario que retwitteó y los datos originales del tweet.&#10;  - Botón &quot;Mostrar más&quot; para ver los siguientes 15 tweets, hasta que no haya más (cambia a &quot;No hay más...&quot; si se termina).&#10;&#10;- **Crear nuevo tweet**:&#10;  - Formulario con:&#10;    - Input para el userid del creador&#10;    - Input para el texto del tweet&#10;    - Botón para crear&#10;  - Indicar éxito o falla en la creación.&#10;&#10;---&#10;&#10;## Tecnologías usadas&#10;&#10;- &lt;img src=&quot;https://img.shields.io/badge/Java-17%2B-blue?logo=java&quot; alt=&quot;Java&quot; height=&quot;20&quot;/&gt; Java 17+&#10;- &lt;img src=&quot;https://img.shields.io/badge/JUnit-5-green?logo=junit5&quot; alt=&quot;JUnit 5&quot; height=&quot;20&quot;/&gt; JUnit 5 para tests unitarios e integración&#10;- &lt;img src=&quot;https://img.shields.io/badge/Maven-Build%20Tool-blue?logo=apachemaven&quot; alt=&quot;Maven&quot; height=&quot;20&quot;/&gt; Maven para gestión de dependencias y build&#10;- &lt;img src=&quot;https://img.shields.io/badge/H2-Database-lightgrey?logo=h2&quot; alt=&quot;H2 Database&quot; height=&quot;20&quot;/&gt; H2 Database (o similar) para tests de integración con base de datos en memoria&#10;- &lt;img src=&quot;https://img.shields.io/badge/Hibernate-Persistencia-59666C?logo=hibernate&quot; alt=&quot;Hibernate&quot; height=&quot;20&quot;/&gt; Hibernate para persistencia de datos&#10;- &lt;img src=&quot;https://img.shields.io/badge/Spring%20Boot-Web%20Backend-6DB33F?logo=springboot&quot; alt=&quot;Spring Boot&quot; height=&quot;20&quot;/&gt; Spring Boot para servicios web REST&#10;- &lt;img src=&quot;https://img.shields.io/badge/REST-API-orange?logo=rest&quot; alt=&quot;REST API&quot; height=&quot;20&quot;/&gt; REST API para comunicación entre front-end y back-end&#10;- &lt;img src=&quot;https://img.shields.io/badge/React-Front--end-61DAFB?logo=react&quot; alt=&quot;React&quot; height=&quot;20&quot;/&gt; React para el front-end&#10;- &lt;img src=&quot;https://img.shields.io/badge/HTML%2FCSS%2FJS-Frontend-yellow?logo=html5&quot; alt=&quot;HTML/CSS/JavaScript&quot; height=&quot;20&quot;/&gt; HTML/CSS/JavaScript para el front-end&#10;&#10;---&#10;&#10;## Modelo de Objetos&#10;&#10;&gt; El siguiente diagrama representa el modelado de objetos principal del sistema (User, Tweet, ReTweet). Puedes abrir el archivo HTML en tu navegador para visualizarlo o editarlo en diagrams.net/draw.io.&#10;&#10;[Ver modelo de objetos (HTML)](modeloDeObjetos.html)&#10;&#10;---&#10;&#10;&gt; Trabajo Práctico General - Mini Twitter  &#10;&gt; Universidad Nacional de Río Negro - Lic. en Sistemas  &#10;&gt; Autor: Agustín Fernández Gómez&#10;" />
              <option name="updatedContent" value="# Mini Twitter - TP Individual&#10;&#10;## Autor&#10;**Agustín Fernández Gómez**&#10;&#10;---&#10;&#10;## Consigna&#10;&#10;**Universidad Nacional de Río Negro**  &#10;Taller de Tecnologías y Producción de Software  &#10;Lic. En Sistemas&#10;&#10;### Trabajo Práctico General&#10;&#10;Vamos a construir una versión muy simplificada de Twitter con una arquitectura monolítica de back-end. El back-end y el front-end son aplicaciones separadas que se comunican vía servicios web.&#10;&#10;### Requerimientos a modelar&#10;&#10;1. Cada usuario conoce todos los Tweets que hizo.&#10;2. Un tweet puede ser re-tweet de otro, y este tweet debe conocer a su tweet de origen.&#10;3. Un re-tweet no tiene texto adicional.&#10;4. Los tweets de un usuario se deben eliminar cuando el usuario es eliminado. No existen tweets no referenciados por un usuario.&#10;5. No se pueden agregar dos usuarios con el mismo userName.&#10;6. userName no puede ser menor a 5 caracteres ni mayor a 25.&#10;7. Los tweets deben tener un texto de 1 carácter como mínimo y 280 caracteres como máximo.&#10;8. No se debe permitir crear un re-tweet de un tweet creado por el mismo usuario que re-twittea.&#10;&#10;### Se pide&#10;&#10;1. Modelar en objetos.&#10;2. Escribir test unitarios.&#10;3. Mapear para persistir y generar los servicios de backend.&#10;4. Escribir test de integración usando una BD en memoria.&#10;5. Exponer los servicios de backend como Servicios Web.&#10;6. Escribir test de integración de la capa Web.&#10;7. Lograr cobertura alta (&gt;= 90%).&#10;8. Implementar el front-end cuya navegabilidad se describe más adelante.&#10;&#10;---&#10;&#10;## Front-end&#10;&#10;La home page debe tener la siguiente estructura:&#10;&#10;- **Header Menú**:&#10;  - Nombre del sistema&#10;  - Link a la home page&#10;  - Link para crear un nuevo tweet&#10;&#10;- **Panel principal**:&#10;  - Se muestran los tweets (no incluir ReTweets) de cualquier usuario, paginados de a 10 por página.&#10;  - Navegación de paginación (adelante/atrás, botones deshabilitados si no hay más).&#10;&#10;- **Panel izquierdo**:&#10;  - Lista de usuarios del sistema (solo userNames).&#10;  - Al clickear en un usuario, se muestran sus últimos 15 tweets en el panel principal.&#10;  - Si es re-tweet, mostrar la fecha de retweet, el nombre del usuario que retwitteó y los datos originales del tweet.&#10;  - Botón &quot;Mostrar más&quot; para ver los siguientes 15 tweets, hasta que no haya más (cambia a &quot;No hay más...&quot; si se termina).&#10;&#10;- **Crear nuevo tweet**:&#10;  - Formulario con:&#10;    - Input para el userid del creador&#10;    - Input para el texto del tweet&#10;    - Botón para crear&#10;  - Indicar éxito o falla en la creación.&#10;&#10;---&#10;&#10;## Tecnologías usadas&#10;&#10;- &lt;img src=&quot;https://img.shields.io/badge/Java-17%2B-blue?logo=java&quot; alt=&quot;Java&quot; height=&quot;20&quot;/&gt; Java 17+&#10;- &lt;img src=&quot;https://img.shields.io/badge/JUnit-5-green?logo=junit5&quot; alt=&quot;JUnit 5&quot; height=&quot;20&quot;/&gt; JUnit 5 para tests unitarios e integración&#10;- &lt;img src=&quot;https://img.shields.io/badge/Maven-Build%20Tool-blue?logo=apachemaven&quot; alt=&quot;Maven&quot; height=&quot;20&quot;/&gt; Maven para gestión de dependencias y build&#10;- &lt;img src=&quot;https://img.shields.io/badge/H2-Database-lightgrey?logo=h2&quot; alt=&quot;H2 Database&quot; height=&quot;20&quot;/&gt; H2 Database (o similar) para tests de integración con base de datos en memoria&#10;- &lt;img src=&quot;https://img.shields.io/badge/Hibernate-Persistencia-59666C?logo=hibernate&quot; alt=&quot;Hibernate&quot; height=&quot;20&quot;/&gt; Hibernate para persistencia de datos&#10;- &lt;img src=&quot;https://img.shields.io/badge/Spring%20Boot-Web%20Backend-6DB33F?logo=springboot&quot; alt=&quot;Spring Boot&quot; height=&quot;20&quot;/&gt; Spring Boot para servicios web REST&#10;- &lt;img src=&quot;https://img.shields.io/badge/REST-API-orange?logo=rest&quot; alt=&quot;REST API&quot; height=&quot;20&quot;/&gt; REST API para comunicación entre front-end y back-end&#10;- &lt;img src=&quot;https://img.shields.io/badge/React-Front--end-61DAFB?logo=react&quot; alt=&quot;React&quot; height=&quot;20&quot;/&gt; React para el front-end&#10;- &lt;img src=&quot;https://img.shields.io/badge/HTML%2FCSS%2FJS-Frontend-yellow?logo=html5&quot; alt=&quot;HTML/CSS/JavaScript&quot; height=&quot;20&quot;/&gt; HTML/CSS/JavaScript para el front-end&#10;&#10;---&#10;&#10;## Modelo de Objetos&#10;&#10;&gt; El siguiente diagrama representa el modelado de objetos principal del sistema (User, Tweet, ReTweet). Puedes visualizarlo directamente aquí:&#10;&#10;![Modelo de Objetos](Diagrama_MiniTweeter_BD2_2025.drawio.png)&#10;&#10;---&#10;&#10;&gt; Trabajo Práctico General - Mini Twitter  &#10;&gt; Universidad Nacional de Río Negro - Lic. en Sistemas  &#10;&gt; Autor: Agustín Fernández Gómez" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test/java/unrn/model/ReTweetTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test/java/unrn/model/ReTweetTest.java" />
              <option name="originalContent" value="package unrn.model;&#10;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class ReTweetTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweet se crea correctamente con usuario y tweet original válidos&quot;)&#10;    void constructor_creaReTweetCorrectamente() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User retweeter = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación&#10;        ReTweet retweet = new ReTweet(retweeter, tweet);&#10;        // Verificación&#10;        assertEquals(tweet, retweet.getOriginalTweet(), &quot;El retweet debe referenciar al tweet original&quot;);&#10;        assertEquals(retweeter, retweet.getUserRetweeted(), &quot;El usuario debe ser el que retuiteó&quot;);&#10;        assertNotNull(retweet.getDate(), &quot;La fecha de retweet no debe ser nula&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweet lanza excepción si el tweet original es nulo&quot;)&#10;    void constructor_lanzaExcepcionSiTweetOriginalNulo() {&#10;        // Setup&#10;        User retweeter = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new ReTweet(retweeter, null));&#10;        assertEquals(ReTweet.ERROR_ORIGINAL_TWEET_NULL, ex.getMessage(), &quot;Debe lanzar excepción por tweet original nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweet lanza excepción si el usuario es nulo&quot;)&#10;    void constructor_lanzaExcepcionSiUsuarioNulo() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new ReTweet(null, tweet));&#10;        assertEquals(ReTweet.ERROR_USER_RETWEET_NULL, ex.getMessage(), &quot;Debe lanzar excepción por usuario nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweet lanza excepción si el usuario es el creador del tweet original&quot;)&#10;    void constructor_lanzaExcepcionSiUsuarioEsCreador() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new ReTweet(creador, tweet));&#10;        assertEquals(ReTweet.ERROR_USER_RETWEET_SELF, ex.getMessage(), &quot;Debe lanzar excepción por retuitear su propio tweet&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package unrn.model;&#10;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class ReTweetTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweet se crea correctamente con usuario y tweet original válidos&quot;)&#10;    void constructor_creaReTweetCorrectamente() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User retweeter = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación&#10;        ReTweet retweet = new ReTweet(retweeter, tweet);&#10;        // Verificación&#10;        assertEquals(tweet, retweet.getOriginalTweet(), &quot;El retweet debe referenciar al tweet original&quot;);&#10;        assertEquals(retweeter, retweet.getUserRetweeted(), &quot;El usuario debe ser el que retuiteó&quot;);&#10;        assertNotNull(retweet.getDate(), &quot;La fecha de retweet no debe ser nula&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweet lanza excepción si el tweet original es nulo&quot;)&#10;    void constructor_lanzaExcepcionSiTweetOriginalNulo() {&#10;        // Setup&#10;        User retweeter = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new ReTweet(retweeter, null));&#10;        assertEquals(ReTweet.ERROR_ORIGINAL_TWEET_NULL, ex.getMessage(), &quot;Debe lanzar excepción por tweet original nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweet lanza excepción si el usuario es nulo&quot;)&#10;    void constructor_lanzaExcepcionSiUsuarioNulo() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new ReTweet(null, tweet));&#10;        assertEquals(ReTweet.ERROR_USER_RETWEET_NULL, ex.getMessage(), &quot;Debe lanzar excepción por usuario nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;ReTweet lanza excepción si el usuario es el creador del tweet original&quot;)&#10;    void constructor_lanzaExcepcionSiUsuarioEsCreador() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new ReTweet(creador, tweet));&#10;        assertEquals(ReTweet.ERROR_USER_RETWEET_SELF, ex.getMessage(), &quot;Debe lanzar excepción por retuitear su propio tweet&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test/java/unrn/model/TweetTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test/java/unrn/model/TweetTest.java" />
              <option name="updatedContent" value="package unrn.model;&#10;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;import java.util.Date;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class TweetTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet se crea correctamente con texto válido y usuario válido&quot;)&#10;    void constructor_creaTweetCorrectamente() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String texto = &quot;Hola mundo&quot;;&#10;        // Ejercitación&#10;        Tweet tweet = new Tweet(texto, user);&#10;        // Verificación&#10;        assertEquals(texto, tweet.getText(), &quot;El texto del tweet debe coincidir&quot;);&#10;        assertTrue(tweet.isUserCreator(user), &quot;El usuario debe ser el creador del tweet&quot;);&#10;        assertNotNull(tweet.getDateCreated(), &quot;La fecha de creación no debe ser nula&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el texto es nulo o vacío&quot;)&#10;    void constructor_lanzaExcepcionSiTextoInvalido() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Ejercitación y Verificación&#10;        var ex1 = assertThrows(RuntimeException.class, () -&gt; new Tweet(null, user));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex1.getMessage(), &quot;Debe lanzar excepción por texto nulo&quot;);&#10;        var ex2 = assertThrows(RuntimeException.class, () -&gt; new Tweet(&quot;&quot;, user));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex2.getMessage(), &quot;Debe lanzar excepción por texto vacío&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el texto supera los 280 caracteres&quot;)&#10;    void constructor_lanzaExcepcionSiTextoMuyLargo() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String textoLargo = &quot;a&quot;.repeat(281);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new Tweet(textoLargo, user));&#10;        assertEquals(Tweet.ERROR_TWEET_TEXT_LENGTH, ex.getMessage(), &quot;Debe lanzar excepción por texto demasiado largo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Tweet lanza excepción si el usuario es nulo&quot;)&#10;    void constructor_lanzaExcepcionSiUsuarioNulo() {&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new Tweet(&quot;Hola&quot;, null));&#10;        assertEquals(Tweet.ERROR_USER_CREATOR_NULL, ex.getMessage(), &quot;Debe lanzar excepción por usuario nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;retweetBy crea un retweet correctamente si el usuario es válido y no es el creador&quot;)&#10;    void retweetBy_creaRetweetCorrectamente() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User retweeter = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación&#10;        ReTweet retweet = tweet.retweetBy(retweeter);&#10;        // Verificación&#10;        assertEquals(tweet, retweet.getOriginalTweet(), &quot;El retweet debe referenciar al tweet original&quot;);&#10;        assertEquals(retweeter, retweet.getUserRetweeted(), &quot;El usuario debe ser el que retuiteó&quot;);&#10;        assertNotNull(retweet.getDate(), &quot;La fecha de retweet no debe ser nula&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;retweetBy lanza excepción si el usuario es nulo&quot;)&#10;    void retweetBy_lanzaExcepcionSiUsuarioNulo() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; tweet.retweetBy(null));&#10;        assertEquals(Tweet.ERROR_USER_RETWEETED_NULL, ex.getMessage(), &quot;Debe lanzar excepción por usuario nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;retweetBy lanza excepción si el usuario es el creador del tweet&quot;)&#10;    void retweetBy_lanzaExcepcionSiUsuarioEsCreador() {&#10;        // Setup&#10;        User creador = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        Tweet tweet = new Tweet(&quot;Hola&quot;, creador);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; tweet.retweetBy(creador));&#10;        assertEquals(Tweet.ERROR_USER_RETWEET_SELF, ex.getMessage(), &quot;Debe lanzar excepción por retuitear su propio tweet&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test/java/unrn/model/UserTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test/java/unrn/model/UserTest.java" />
              <option name="updatedContent" value="package unrn.model;&#10;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import java.util.List;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class UserTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;createTweet agrega un tweet correctamente a la lista de tweets del usuario&quot;)&#10;    void createTweet_agregaTweetCorrectamente() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        String texto = &quot;Hola mundo&quot;;&#10;        // Ejercitación&#10;        user.createTweet(texto);&#10;        // Verificación&#10;        List&lt;Tweet&gt; tweets = user.getTweets();&#10;        assertEquals(1, tweets.size(), &quot;El usuario debe tener un tweet en la lista&quot;);&#10;        assertEquals(texto, tweets.get(0).getText(), &quot;El texto del tweet no coincide&quot;);&#10;        assertEquals(user, tweets.get(0).isUserCreator(user) ? user : null, &quot;El usuario debe ser el creador del tweet&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;createRetweet agrega un retweet correctamente a la lista de retweets del usuario&quot;)&#10;    void createRetweet_agregaRetweetCorrectamente() {&#10;        // Setup&#10;        User user1 = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        User user2 = new User(&quot;usuario2&quot;, &quot;mail2@mail.com&quot;);&#10;        user1.createTweet(&quot;Tweet original&quot;);&#10;        Tweet tweet = user1.getTweets().get(0);&#10;        // Ejercitación&#10;        user2.createRetweet(tweet);&#10;        // Verificación&#10;        List&lt;ReTweet&gt; retweets = user2.getRetweets();&#10;        assertEquals(1, retweets.size(), &quot;El usuario debe tener un retweet en la lista&quot;);&#10;        assertEquals(tweet, retweets.get(0).getOriginalTweet(), &quot;El retweet debe referenciar al tweet original&quot;);&#10;        assertEquals(user2, retweets.get(0).getUserRetweeted(), &quot;El usuario debe ser el que retuiteó&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;createRetweet lanza excepción si el usuario intenta retuitear su propio tweet&quot;)&#10;    void createRetweet_lanzaExcepcionSiRetuiteaPropioTweet() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        user.createTweet(&quot;Tweet propio&quot;);&#10;        Tweet tweet = user.getTweets().get(0);&#10;        // Ejercitación y Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; user.createRetweet(tweet));&#10;        assertEquals(ReTweet.ERROR_USER_RETWEET_SELF, ex.getMessage(), &quot;Debe lanzar excepción por retuitear su propio tweet&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getUsername retorna el nombre de usuario correctamente&quot;)&#10;    void getUsername_retornaUsernameCorrectamente() {&#10;        // Setup&#10;        String username = &quot;usuario1&quot;;&#10;        User user = new User(username, &quot;mail@mail.com&quot;);&#10;        // Ejercitación&#10;        String result = user.getUsername();&#10;        // Verificación&#10;        assertEquals(username, result, &quot;El username retornado no es correcto&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getTweets retorna lista vacía si el usuario no tiene tweets&quot;)&#10;    void getTweets_listaVaciaSiNoTieneTweets() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Ejercitación&#10;        List&lt;Tweet&gt; tweets = user.getTweets();&#10;        // Verificación&#10;        assertTrue(tweets.isEmpty(), &quot;La lista de tweets debe estar vacía&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;getRetweets retorna lista vacía si el usuario no tiene retweets&quot;)&#10;    void getRetweets_listaVaciaSiNoTieneRetweets() {&#10;        // Setup&#10;        User user = new User(&quot;usuario1&quot;, &quot;mail@mail.com&quot;);&#10;        // Ejercitación&#10;        List&lt;ReTweet&gt; retweets = user.getRetweets();&#10;        // Verificación&#10;        assertTrue(retweets.isEmpty(), &quot;La lista de retweets debe estar vacía&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>